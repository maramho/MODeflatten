[DEBUG] Flattening Score: 0.9923273657289002
[DEBUG] Function 0x1150 Flattening Score: 0.9923273657289002
-------------------------
|    func : 0x1150    |
-------------------------
[INFO] Deobfuscation 시작: 0x1150
[INFO] GDB 추적된 state 주소: 0x7fffffffda94, 변경 내역: [0, 0, 0, 2, 2, 2, -1, -1]
[INFO] 동적으로 설정된 STATE 변수: @4[ADD(RSP, 0x34)]
[DEBUG] get_cff_info() 실행 시작
[DEBUG] 블록: 0x1150
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x2C], 0x0
[DEBUG] 블록: 0x116a
[DEBUG] 블록: 0x117d
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x24], 0x0
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x20], 0x0
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x30], 0x1535C
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x1e62
[DEBUG] 블록: 0x13c9
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x1e7d
[DEBUG] 찾은 JMP: JMP        loc_key_35
[DEBUG] 블록: 0x1e82
[DEBUG] 블록: 0x1e91
[DEBUG] 찾은 JMP: JMP        loc_key_38
[DEBUG] 블록: 0x1404
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x30], 0xCAB1
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x1e96
[DEBUG] 블록: 0x1a31
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x1ea5
[DEBUG] 찾은 JMP: JMP        loc_key_41
[DEBUG] 블록: 0x1eaa
[DEBUG] 블록: 0x1eb9
[DEBUG] 찾은 JMP: JMP        loc_key_44
[DEBUG] 블록: 0x1775
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x1ebe
[DEBUG] 블록: 0x1ecd
[DEBUG] 찾은 JMP: JMP        loc_key_47
[DEBUG] 블록: 0x1b55
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x1ed2
[DEBUG] 블록: 0x1ee1
[DEBUG] 찾은 JMP: JMP        loc_key_50
[DEBUG] 블록: 0x1d0b
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x1ee6
[DEBUG] 블록: 0x1ef5
[DEBUG] 찾은 JMP: JMP        loc_key_53
[DEBUG] 블록: 0x19bd
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x1efa
[DEBUG] 블록: 0x1f09
[DEBUG] 찾은 JMP: JMP        loc_key_56
[DEBUG] 블록: 0x1807
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x1f0e
[DEBUG] 블록: 0x19ca
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x1f1d
[DEBUG] 찾은 JMP: JMP        loc_key_59
[DEBUG] 블록: 0x1f22
[DEBUG] 블록: 0x1f31
[DEBUG] 찾은 JMP: JMP        loc_key_62
[DEBUG] 블록: 0x11e2
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x1f36
[DEBUG] 블록: 0x1e5a
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 블록: 0x1f45
[DEBUG] 찾은 JMP: JMP        loc_key_65
[DEBUG] 블록: 0x1f4a
[DEBUG] 블록: 0x1f59
[DEBUG] 찾은 JMP: JMP        loc_key_68
[DEBUG] 블록: 0x1397
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x30], 0x14125
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x1f5e
[DEBUG] 블록: 0x187b
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x1f6d
[DEBUG] 찾은 JMP: JMP        loc_key_71
[DEBUG] 블록: 0x1f72
[DEBUG] 블록: 0x1ce0
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x1f81
[DEBUG] 찾은 JMP: JMP        loc_key_74
[DEBUG] 블록: 0x1f86
[DEBUG] 블록: 0x12f3
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x30], 0x1ED3
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x1f95
[DEBUG] 찾은 JMP: JMP        loc_key_77
[DEBUG] 블록: 0x1f9a
[DEBUG] 블록: 0x1981
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x1fa9
[DEBUG] 찾은 JMP: JMP        loc_key_80
[DEBUG] 블록: 0x1fae
[DEBUG] 블록: 0x1382
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x30], 0x9580
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x1fbd
[DEBUG] 찾은 JMP: JMP        loc_key_83
[DEBUG] 블록: 0x1fc2
[DEBUG] 블록: 0x1651
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x1fd1
[DEBUG] 찾은 JMP: JMP        loc_key_86
[DEBUG] 블록: 0x1fd6
[DEBUG] 블록: 0x1793
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x1fe5
[DEBUG] 찾은 JMP: JMP        loc_key_89
[DEBUG] 블록: 0x1fea
[DEBUG] 블록: 0x1ff9
[DEBUG] 찾은 JMP: JMP        loc_key_92
[DEBUG] 블록: 0x1b2a
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x1ffe
[DEBUG] 블록: 0x200d
[DEBUG] 찾은 JMP: JMP        loc_key_95
[DEBUG] 블록: 0x199f
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2012
[DEBUG] 블록: 0x1c79
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2021
[DEBUG] 찾은 JMP: JMP        loc_key_98
[DEBUG] 블록: 0x2026
[DEBUG] 블록: 0x2035
[DEBUG] 찾은 JMP: JMP        loc_key_101
[DEBUG] 블록: 0x13ef
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x30], 0x7200
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x203a
[DEBUG] 블록: 0x1a98
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2049
[DEBUG] 찾은 JMP: JMP        loc_key_104
[DEBUG] 블록: 0x204e
[DEBUG] 블록: 0x15fb
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x205d
[DEBUG] 찾은 JMP: JMP        loc_key_107
[DEBUG] 블록: 0x2062
[DEBUG] 블록: 0x2071
[DEBUG] 찾은 JMP: JMP        loc_key_110
[DEBUG] 블록: 0x1425
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x30], 0x14FA
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2076
[DEBUG] 블록: 0x1283
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x30], 0x157CA
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2085
[DEBUG] 찾은 JMP: JMP        loc_key_113
[DEBUG] 블록: 0x208a
[DEBUG] 블록: 0x1701
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2099
[DEBUG] 찾은 JMP: JMP        loc_key_116
[DEBUG] 블록: 0x209e
[DEBUG] 블록: 0x1cb5
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x20ad
[DEBUG] 찾은 JMP: JMP        loc_key_119
[DEBUG] 블록: 0x20b2
[DEBUG] 블록: 0x15a1
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x20c1
[DEBUG] 찾은 JMP: JMP        loc_key_122
[DEBUG] 블록: 0x20c6
[DEBUG] 블록: 0x20d5
[DEBUG] 찾은 JMP: JMP        loc_key_125
[DEBUG] 블록: 0x1ab6
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x20da
[DEBUG] 블록: 0x20e9
[DEBUG] 찾은 JMP: JMP        loc_key_128
[DEBUG] 블록: 0x1ced
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x20ee
[DEBUG] 블록: 0x20fd
[DEBUG] 찾은 JMP: JMP        loc_key_131
[DEBUG] 블록: 0x1325
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2102
[DEBUG] 블록: 0x2111
[DEBUG] 찾은 JMP: JMP        loc_key_134
[DEBUG] 블록: 0x13ac
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x1C], 0x0
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x30], 0x14FA
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2116
[DEBUG] 블록: 0x1550
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x910A
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2125
[DEBUG] 찾은 JMP: JMP        loc_key_137
[DEBUG] 블록: 0x212a
[DEBUG] 블록: 0x2139
[DEBUG] 찾은 JMP: JMP        loc_key_140
[DEBUG] 블록: 0x1ac3
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x213e
[DEBUG] 블록: 0x1b0c
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x214d
[DEBUG] 찾은 JMP: JMP        loc_key_143
[DEBUG] 블록: 0x2152
[DEBUG] 블록: 0x2161
[DEBUG] 찾은 JMP: JMP        loc_key_146
[DEBUG] 블록: 0x11c5
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x30], 0x13FE8
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2166
[DEBUG] 블록: 0x17a0
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2175
[DEBUG] 찾은 JMP: JMP        loc_key_149
[DEBUG] 블록: 0x217a
[DEBUG] 블록: 0x2189
[DEBUG] 찾은 JMP: JMP        loc_key_152
[DEBUG] 블록: 0x1956
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x218e
[DEBUG] 블록: 0x219d
[DEBUG] 찾은 JMP: JMP        loc_key_155
[DEBUG] 블록: 0x1aff
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x21a2
[DEBUG] 블록: 0x21b1
[DEBUG] 찾은 JMP: JMP        loc_key_158
[DEBUG] 블록: 0x1644
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x21b6
[DEBUG] 블록: 0x21c5
[DEBUG] 찾은 JMP: JMP        loc_key_161
[DEBUG] 블록: 0x1a4f
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x21ca
[DEBUG] 블록: 0x21d9
[DEBUG] 찾은 JMP: JMP        loc_key_164
[DEBUG] 블록: 0x1d7f
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x21de
[DEBUG] 블록: 0x1c5b
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x21ed
[DEBUG] 찾은 JMP: JMP        loc_key_167
[DEBUG] 블록: 0x21f2
[DEBUG] 블록: 0x2201
[DEBUG] 찾은 JMP: JMP        loc_key_170
[DEBUG] 블록: 0x14e3
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x30], 0x9467
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2206
[DEBUG] 블록: 0x1228
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2215
[DEBUG] 찾은 JMP: JMP        loc_key_173
[DEBUG] 블록: 0x221a
[DEBUG] 블록: 0x2229
[DEBUG] 찾은 JMP: JMP        loc_key_176
[DEBUG] 블록: 0x1df3
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x222e
[DEBUG] 블록: 0x223d
[DEBUG] 찾은 JMP: JMP        loc_key_179
[DEBUG] 블록: 0x1205
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2242
[DEBUG] 블록: 0x1298
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2251
[DEBUG] 찾은 JMP: JMP        loc_key_182
[DEBUG] 블록: 0x2256
[DEBUG] 블록: 0x2265
[DEBUG] 찾은 JMP: JMP        loc_key_185
[DEBUG] 블록: 0x1515
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x30], 0x1535C
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x226a
[DEBUG] 블록: 0x2279
[DEBUG] 찾은 JMP: JMP        loc_key_188
[DEBUG] 블록: 0x1e3c
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x227e
[DEBUG] 블록: 0x1c12
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x228d
[DEBUG] 찾은 JMP: JMP        loc_key_191
[DEBUG] 블록: 0x2292
[DEBUG] 블록: 0x22a1
[DEBUG] 찾은 JMP: JMP        loc_key_194
[DEBUG] 블록: 0x19f5
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x22a6
[DEBUG] 블록: 0x22b5
[DEBUG] 찾은 JMP: JMP        loc_key_197
[DEBUG] 블록: 0x15bf
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x22ba
[DEBUG] 블록: 0x22c9
[DEBUG] 찾은 JMP: JMP        loc_key_200
[DEBUG] 블록: 0x1565
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x22ce
[DEBUG] 블록: 0x22dd
[DEBUG] 찾은 JMP: JMP        loc_key_203
[DEBUG] 블록: 0x18ef
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x22e2
[DEBUG] 블록: 0x22f1
[DEBUG] 찾은 JMP: JMP        loc_key_206
[DEBUG] 블록: 0x149a
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x30], 0x147A9
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x22f6
[DEBUG] 블록: 0x1a13
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2305
[DEBUG] 찾은 JMP: JMP        loc_key_209
[DEBUG] 블록: 0x230a
[DEBUG] 블록: 0x2319
[DEBUG] 찾은 JMP: JMP        loc_key_212
[DEBUG] 블록: 0x1b73
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x231e
[DEBUG] 블록: 0x1dc8
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x232d
[DEBUG] 찾은 JMP: JMP        loc_key_215
[DEBUG] 블록: 0x2332
[DEBUG] 블록: 0x19e8
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2341
[DEBUG] 찾은 JMP: JMP        loc_key_218
[DEBUG] 블록: 0x2346
[DEBUG] 블록: 0x192b
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2355
[DEBUG] 찾은 JMP: JMP        loc_key_221
[DEBUG] 블록: 0x235a
[DEBUG] 블록: 0x2369
[DEBUG] 찾은 JMP: JMP        loc_key_224
[DEBUG] 블록: 0x1445
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x24], 0xFFFFFFFF
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x30], 0x14125
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x236e
[DEBUG] 블록: 0x1899
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x237d
[DEBUG] 찾은 JMP: JMP        loc_key_227
[DEBUG] 블록: 0x2382
[DEBUG] 블록: 0x2391
[DEBUG] 찾은 JMP: JMP        loc_key_230
[DEBUG] 블록: 0x18b7
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2396
[DEBUG] 블록: 0x16e3
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x23a5
[DEBUG] 찾은 JMP: JMP        loc_key_233
[DEBUG] 블록: 0x23aa
[DEBUG] 블록: 0x23b9
[DEBUG] 찾은 JMP: JMP        loc_key_236
[DEBUG] 블록: 0x166f
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x23be
[DEBUG] 블록: 0x1cc2
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x23cd
[DEBUG] 찾은 JMP: JMP        loc_key_239
[DEBUG] 블록: 0x23d2
[DEBUG] 블록: 0x1e11
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x23e1
[DEBUG] 찾은 JMP: JMP        loc_key_242
[DEBUG] 블록: 0x23e6
[DEBUG] 블록: 0x23f5
[DEBUG] 찾은 JMP: JMP        loc_key_245
[DEBUG] 블록: 0x16c5
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x23fa
[DEBUG] 블록: 0x1619
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2409
[DEBUG] 찾은 JMP: JMP        loc_key_248
[DEBUG] 블록: 0x240e
[DEBUG] 블록: 0x1462
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x30], 0x147A9
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x241d
[DEBUG] 찾은 JMP: JMP        loc_key_251
[DEBUG] 블록: 0x2422
[DEBUG] 블록: 0x1d61
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2431
[DEBUG] 찾은 JMP: JMP        loc_key_254
[DEBUG] 블록: 0x2436
[DEBUG] 블록: 0x1bc9
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2445
[DEBUG] 찾은 JMP: JMP        loc_key_257
[DEBUG] 블록: 0x244a
[DEBUG] 블록: 0x2459
[DEBUG] 찾은 JMP: JMP        loc_key_260
[DEBUG] 블록: 0x1d29
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x245e
[DEBUG] 블록: 0x152a
[DEBUG] 블록: 0x246d
[DEBUG] 찾은 JMP: JMP        loc_key_264
[DEBUG] 블록: 0x153c
[DEBUG] 블록: 0x2472
[DEBUG] 블록: 0x2481
[DEBUG] 찾은 JMP: JMP        loc_key_267
[DEBUG] 블록: 0x1b9e
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2486
[DEBUG] 블록: 0x1d54
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2495
[DEBUG] 찾은 JMP: JMP        loc_key_270
[DEBUG] 블록: 0x249a
[DEBUG] 블록: 0x24a9
[DEBUG] 찾은 JMP: JMP        loc_key_273
[DEBUG] 블록: 0x1a8b
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x24ae
[DEBUG] 블록: 0x1bbc
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x24bd
[DEBUG] 찾은 JMP: JMP        loc_key_276
[DEBUG] 블록: 0x24c2
[DEBUG] 블록: 0x24d1
[DEBUG] 찾은 JMP: JMP        loc_key_279
[DEBUG] 블록: 0x1825
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x24d6
[DEBUG] 블록: 0x17cb
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x24e5
[DEBUG] 찾은 JMP: JMP        loc_key_282
[DEBUG] 블록: 0x24ea
[DEBUG] 블록: 0x1348
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x24], 0x2
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x30], 0x756B
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x24f9
[DEBUG] 찾은 JMP: JMP        loc_key_285
[DEBUG] 블록: 0x24fe
[DEBUG] 블록: 0x174a
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x250d
[DEBUG] 찾은 JMP: JMP        loc_key_288
[DEBUG] 블록: 0x2512
[DEBUG] 블록: 0x2521
[DEBUG] 찾은 JMP: JMP        loc_key_291
[DEBUG] 블록: 0x1757
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2526
[DEBUG] 블록: 0x2535
[DEBUG] 찾은 JMP: JMP        loc_key_294
[DEBUG] 블록: 0x171f
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x253a
[DEBUG] 블록: 0x2549
[DEBUG] 찾은 JMP: JMP        loc_key_297
[DEBUG] 블록: 0x17be
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x254e
[DEBUG] 블록: 0x172c
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x255d
[DEBUG] 찾은 JMP: JMP        loc_key_300
[DEBUG] 블록: 0x2562
[DEBUG] 블록: 0x1ae1
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2571
[DEBUG] 찾은 JMP: JMP        loc_key_303
[DEBUG] 블록: 0x2576
[DEBUG] 블록: 0x2585
[DEBUG] 찾은 JMP: JMP        loc_key_306
[DEBUG] 블록: 0x1e2f
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x258a
[DEBUG] 블록: 0x2599
[DEBUG] 찾은 JMP: JMP        loc_key_309
[DEBUG] 블록: 0x1de6
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x259e
[DEBUG] 블록: 0x25ad
[DEBUG] 찾은 JMP: JMP        loc_key_312
[DEBUG] 블록: 0x1be7
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x25b2
[DEBUG] 블록: 0x1260
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x25c1
[DEBUG] 찾은 JMP: JMP        loc_key_315
[DEBUG] 블록: 0x25c6
[DEBUG] 블록: 0x25d5
[DEBUG] 찾은 JMP: JMP        loc_key_318
[DEBUG] 블록: 0x1b37
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x25da
[DEBUG] 블록: 0x1949
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x25e9
[DEBUG] 찾은 JMP: JMP        loc_key_321
[DEBUG] 블록: 0x25ee
[DEBUG] 블록: 0x25fd
[DEBUG] 찾은 JMP: JMP        loc_key_324
[DEBUG] 블록: 0x1365
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x24], 0xFFFFFFFF
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x30], 0x756B
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2602
[DEBUG] 블록: 0x2611
[DEBUG] 찾은 JMP: JMP        loc_key_327
[DEBUG] 블록: 0x1d9d
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2616
[DEBUG] 블록: 0x2625
[DEBUG] 찾은 JMP: JMP        loc_key_330
[DEBUG] 블록: 0x1d36
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x262a
[DEBUG] 블록: 0x2639
[DEBUG] 찾은 JMP: JMP        loc_key_333
[DEBUG] 블록: 0x12bb
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x30], 0x1ED3
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x263e
[DEBUG] 블록: 0x1dbb
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x264d
[DEBUG] 찾은 JMP: JMP        loc_key_336
[DEBUG] 블록: 0x2652
[DEBUG] 블록: 0x1c30
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2661
[DEBUG] 찾은 JMP: JMP        loc_key_339
[DEBUG] 블록: 0x2666
[DEBUG] 블록: 0x17e9
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2675
[DEBUG] 찾은 JMP: JMP        loc_key_342
[DEBUG] 블록: 0x267a
[DEBUG] 블록: 0x2689
[DEBUG] 찾은 JMP: JMP        loc_key_345
[DEBUG] 블록: 0x1626
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x268e
[DEBUG] 블록: 0x1b91
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x269d
[DEBUG] 찾은 JMP: JMP        loc_key_348
[DEBUG] 블록: 0x26a2
[DEBUG] 블록: 0x26b1
[DEBUG] 찾은 JMP: JMP        loc_key_351
[DEBUG] 블록: 0x15dd
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x26b6
[DEBUG] 블록: 0x26c5
[DEBUG] 찾은 JMP: JMP        loc_key_354
[DEBUG] 블록: 0x186e
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x26ca
[DEBUG] 블록: 0x14f8
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x24], 0xFFFFFFFF
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x30], 0x14125
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x26d9
[DEBUG] 찾은 JMP: JMP        loc_key_357
[DEBUG] 블록: 0x26de
[DEBUG] 블록: 0x11a2
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x26ed
[DEBUG] 찾은 JMP: JMP        loc_key_360
[DEBUG] 블록: 0x26f2
[DEBUG] 블록: 0x2701
[DEBUG] 찾은 JMP: JMP        loc_key_363
[DEBUG] 블록: 0x18c4
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2706
[DEBUG] 블록: 0x124b
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x30], 0x157CA
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2715
[DEBUG] 찾은 JMP: JMP        loc_key_366
[DEBUG] 블록: 0x271a
[DEBUG] 블록: 0x1308
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x24], 0x1
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x30], 0x9580
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2729
[DEBUG] 찾은 JMP: JMP        loc_key_369
[DEBUG] 블록: 0x272e
[DEBUG] 블록: 0x1974
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x273d
[DEBUG] 찾은 JMP: JMP        loc_key_372
[DEBUG] 블록: 0x2742
[DEBUG] 블록: 0x2751
[DEBUG] 찾은 JMP: JMP        loc_key_375
[DEBUG] 블록: 0x169a
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2756
[DEBUG] 블록: 0x2765
[DEBUG] 찾은 JMP: JMP        loc_key_378
[DEBUG] 블록: 0x1c97
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x276a
[DEBUG] 블록: 0x2779
[DEBUG] 찾은 JMP: JMP        loc_key_381
[DEBUG] 블록: 0x168d
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x277e
[DEBUG] 블록: 0x16b8
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x278d
[DEBUG] 찾은 JMP: JMP        loc_key_384
[DEBUG] 블록: 0x2792
[DEBUG] 블록: 0x27a1
[DEBUG] 찾은 JMP: JMP        loc_key_387
[DEBUG] 블록: 0x1583
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x27a6
[DEBUG] 블록: 0x1843
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x27b5
[DEBUG] 찾은 JMP: JMP        loc_key_390
[DEBUG] 블록: 0x27ba
[DEBUG] 블록: 0x27c9
[DEBUG] 찾은 JMP: JMP        loc_key_393
[DEBUG] 블록: 0x190d
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x27ce
[DEBUG] 블록: 0x27dd
[DEBUG] 찾은 JMP: JMP        loc_key_396
[DEBUG] 블록: 0x14c6
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x24], 0xFFFFFFFF
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x30], 0x14125
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x27e2
[DEBUG] 블록: 0x1850
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x27f1
[DEBUG] 찾은 JMP: JMP        loc_key_399
[DEBUG] 블록: 0x27f6
[DEBUG] 블록: 0x1543
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2805
[DEBUG] 찾은 JMP: JMP        loc_key_402
[DEBUG] 블록: 0x280a
[DEBUG] 블록: 0x2819
[DEBUG] 찾은 JMP: JMP        loc_key_405
[DEBUG] 블록: 0x1c05
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x281e
[DEBUG] 블록: 0x12d0
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x282d
[DEBUG] 찾은 JMP: JMP        loc_key_408
[DEBUG] 블록: 0x2832
[DEBUG] 블록: 0x2841
[DEBUG] 찾은 JMP: JMP        loc_key_411
[DEBUG] 블록: 0x1c3d
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x2846
[DEBUG] 블록: 0x2855
[DEBUG] 찾은 JMP: JMP        loc_key_414
[DEBUG] 블록: 0x1a6d
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x285a
[DEBUG] 블록: 0x2869
[DEBUG] 찾은 JMP: JMP        loc_key_417
[DEBUG] 블록: 0x18e2
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x17513
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x286e
[DEBUG] 블록: 0x287d
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] 블록: 0x1477
[DEBUG] 찾은 MOV: MOV        DWORD PTR [RSP + 0x34], 0x6724
[DEBUG] 찾은 JMP: JMP        loc_key_32
[DEBUG] get_cff_info() 종료, relevant_blocks 개수: 259
[DEBUG] dispatcher: 4477, pre_dispatcher: 4477
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RSP, 0x38)
nf = FLAG_SIGN_SUB(RSP, 0x38)
pf = parity((RSP + -0x38) & 0xFF)
cf = FLAG_SUB_CF(RSP, 0x38)
of = FLAG_SUB_OF(RSP, 0x38)
af = ((RSP ^ 0x38) ^ (RSP + -0x38))[4:5]
RSP = RSP + -0x38
[DEBUG] assignblk: @32[RSP + 0x2C] = 0x0
[DEBUG] assignblk: RDI = 0x1163 + 0x1EA1
[DEBUG] assignblk: RAX = {0x0 0 8, RAX[8:64] 8 64}
[DEBUG] assignblk: RAX = call_func_ret(loc_key_28, RSP, RCX, RDX, R8, R9)
RSP = call_func_stack(loc_key_28, RSP)
[DEBUG] assignblk: IRDst = loc_key_29
[DEBUG] assignblk: RDI = 0x1171 + 0x1EA6
[DEBUG] assignblk: RSI = RSP + 0x28
[DEBUG] assignblk: RAX = {0x0 0 8, RAX[8:64] 8 64}
[DEBUG] assignblk: RAX = call_func_ret(loc_key_30, RSP, RCX, RDX, R8, R9)
RSP = call_func_stack(loc_key_30, RSP)
[DEBUG] assignblk: IRDst = loc_key_31
[DEBUG] assignblk: @32[RSP + 0x24] = 0x0
[DEBUG] assignblk: @32[RSP + 0x20] = 0x0
[DEBUG] assignblk: @32[RSP + 0x30] = 0x1535C
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_31, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0x30])
[DEBUG] assignblk: @32[RSP + 0x10] = RAX[0:32]
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0x34])
[DEBUG] MOV 명령어 발견: RAX = zeroExt_64(@32[RSP + 0x34])
[DEBUG] 패치 대상 추가: 블록 loc_key_32, 값: zeroExt_64(@32[RSP + 0x34])
[DEBUG] assignblk: @32[RSP + 0xC] = RAX[0:32]
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x362)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x362)
pf = parity((RAX[0:32] + -0x362) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x362)
of = FLAG_SUB_OF(RAX[0:32], 0x362)
af = ((RAX[0:32] ^ 0x362) ^ (RAX[0:32] + -0x362))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x362)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_33,loc_key_34)
IRDst = CC_EQ(zf)?(loc_key_33,loc_key_34)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_421
[DEBUG] assignblk: RDX = zeroExt_64(@32[RSP + 0x1C])
[DEBUG] assignblk: RAX = zeroExt_64(0x10587)
[DEBUG] assignblk: RCX = zeroExt_64(0x8B98)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RDX[0:32], @32[RSP + 0x28])
nf = FLAG_SIGN_SUB(RDX[0:32], @32[RSP + 0x28])
pf = parity((RDX[0:32] + -@32[RSP + 0x28]) & 0xFF)
cf = FLAG_SUB_CF(RDX[0:32], @32[RSP + 0x28])
of = FLAG_SUB_OF(RDX[0:32], @32[RSP + 0x28])
af = ((RDX[0:32] ^ @32[RSP + 0x28]) ^ (RDX[0:32] + -@32[RSP + 0x28]))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_420,loc_key_421)
[DEBUG] assignblk: @32[RSP + 0x30] = RAX[0:32]
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_421, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_35
IRDst = loc_key_35
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x845)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x845)
pf = parity((RAX[0:32] + -0x845) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x845)
of = FLAG_SUB_OF(RAX[0:32], 0x845)
af = ((RAX[0:32] ^ 0x845) ^ (RAX[0:32] + -0x845))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x845)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_36,loc_key_37)
IRDst = CC_EQ(zf)?(loc_key_36,loc_key_37)
[DEBUG] assignblk: RIP = loc_key_38
IRDst = loc_key_38
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0x1C])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], -@32[RSP + 0x20])
nf = FLAG_SIGN_SUB(RAX[0:32], -@32[RSP + 0x20])
pf = parity((RAX[0:32] + @32[RSP + 0x20]) & 0xFF)
cf = FLAG_ADD_CF(RAX[0:32], @32[RSP + 0x20])
of = FLAG_ADD_OF(RAX[0:32], @32[RSP + 0x20])
af = ((RAX[0:32] ^ @32[RSP + 0x20]) ^ (RAX[0:32] + @32[RSP + 0x20]))[4:5]
RAX = zeroExt_64(RAX[0:32] + @32[RSP + 0x20])
[DEBUG] assignblk: @32[RSP + 0x20] = RAX[0:32]
[DEBUG] assignblk: @32[RSP + 0x30] = 0xCAB1
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_36, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xA55)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xA55)
pf = parity((RAX[0:32] + -0xA55) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xA55)
of = FLAG_SUB_OF(RAX[0:32], 0xA55)
af = ((RAX[0:32] ^ 0xA55) ^ (RAX[0:32] + -0xA55))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xA55)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_39,loc_key_40)
IRDst = CC_EQ(zf)?(loc_key_39,loc_key_40)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_423
[DEBUG] assignblk: RAX = zeroExt_64(0x6EAA)
[DEBUG] assignblk: RCX = zeroExt_64(0x67B4)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0xA1F9)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0xA1F9)
pf = parity((@32[RSP + 0x14] + -0xA1F9) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0xA1F9)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0xA1F9)
af = ((@32[RSP + 0x14] ^ 0xA1F9) ^ (@32[RSP + 0x14] + -0xA1F9))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_422,loc_key_423)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_423, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_41
IRDst = loc_key_41
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xEFF)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xEFF)
pf = parity((RAX[0:32] + -0xEFF) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xEFF)
of = FLAG_SUB_OF(RAX[0:32], 0xEFF)
af = ((RAX[0:32] ^ 0xEFF) ^ (RAX[0:32] + -0xEFF))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xEFF)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_42,loc_key_43)
IRDst = CC_EQ(zf)?(loc_key_42,loc_key_43)
[DEBUG] assignblk: RIP = loc_key_44
IRDst = loc_key_44
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_425
[DEBUG] assignblk: RAX = zeroExt_64(0x37CC)
[DEBUG] assignblk: RCX = zeroExt_64(0x4E58)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x140AF)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x140AF)
pf = parity((@32[RSP + 0x14] + -0x140AF) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x140AF)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x140AF)
af = ((@32[RSP + 0x14] ^ 0x140AF) ^ (@32[RSP + 0x14] + -0x140AF))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_424,loc_key_425)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_425, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x1B19)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x1B19)
pf = parity((RAX[0:32] + -0x1B19) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x1B19)
of = FLAG_SUB_OF(RAX[0:32], 0x1B19)
af = ((RAX[0:32] ^ 0x1B19) ^ (RAX[0:32] + -0x1B19))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x1B19)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_45,loc_key_46)
IRDst = CC_EQ(zf)?(loc_key_45,loc_key_46)
[DEBUG] assignblk: RIP = loc_key_47
IRDst = loc_key_47
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_427
[DEBUG] assignblk: RAX = zeroExt_64(0x998A)
[DEBUG] assignblk: RCX = zeroExt_64(0xD612)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x8B98)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x8B98)
pf = parity((@32[RSP + 0x14] + -0x8B98) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x8B98)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x8B98)
af = ((@32[RSP + 0x14] ^ 0x8B98) ^ (@32[RSP + 0x14] + -0x8B98))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_426,loc_key_427)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_427, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x1B44)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x1B44)
pf = parity((RAX[0:32] + -0x1B44) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x1B44)
of = FLAG_SUB_OF(RAX[0:32], 0x1B44)
af = ((RAX[0:32] ^ 0x1B44) ^ (RAX[0:32] + -0x1B44))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x1B44)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_48,loc_key_49)
IRDst = CC_EQ(zf)?(loc_key_48,loc_key_49)
[DEBUG] assignblk: RIP = loc_key_50
IRDst = loc_key_50
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_429
[DEBUG] assignblk: RAX = zeroExt_64(0xD38E)
[DEBUG] assignblk: RCX = zeroExt_64(0x7206)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x30F1)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x30F1)
pf = parity((@32[RSP + 0x14] + -0x30F1) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x30F1)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x30F1)
af = ((@32[RSP + 0x14] ^ 0x30F1) ^ (@32[RSP + 0x14] + -0x30F1))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_428,loc_key_429)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_429, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x1EF0)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x1EF0)
pf = parity((RAX[0:32] + -0x1EF0) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x1EF0)
of = FLAG_SUB_OF(RAX[0:32], 0x1EF0)
af = ((RAX[0:32] ^ 0x1EF0) ^ (RAX[0:32] + -0x1EF0))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x1EF0)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_51,loc_key_52)
IRDst = CC_EQ(zf)?(loc_key_51,loc_key_52)
[DEBUG] assignblk: RIP = loc_key_53
IRDst = loc_key_53
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_51, 값: 0x17513
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x2148)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x2148)
pf = parity((RAX[0:32] + -0x2148) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x2148)
of = FLAG_SUB_OF(RAX[0:32], 0x2148)
af = ((RAX[0:32] ^ 0x2148) ^ (RAX[0:32] + -0x2148))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x2148)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_54,loc_key_55)
IRDst = CC_EQ(zf)?(loc_key_54,loc_key_55)
[DEBUG] assignblk: RIP = loc_key_56
IRDst = loc_key_56
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_431
[DEBUG] assignblk: RAX = zeroExt_64(0xD807)
[DEBUG] assignblk: RCX = zeroExt_64(0x17040)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x13936)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x13936)
pf = parity((@32[RSP + 0x14] + -0x13936) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x13936)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x13936)
af = ((@32[RSP + 0x14] ^ 0x13936) ^ (@32[RSP + 0x14] + -0x13936))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_430,loc_key_431)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_431, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x21EB)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x21EB)
pf = parity((RAX[0:32] + -0x21EB) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x21EB)
of = FLAG_SUB_OF(RAX[0:32], 0x21EB)
af = ((RAX[0:32] ^ 0x21EB) ^ (RAX[0:32] + -0x21EB))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x21EB)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_57,loc_key_58)
IRDst = CC_EQ(zf)?(loc_key_57,loc_key_58)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_433
[DEBUG] assignblk: RAX = zeroExt_64(0x9E6B)
[DEBUG] assignblk: RCX = zeroExt_64(0x10209)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0xA47E)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0xA47E)
pf = parity((@32[RSP + 0x14] + -0xA47E) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0xA47E)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0xA47E)
af = ((@32[RSP + 0x14] ^ 0xA47E) ^ (@32[RSP + 0x14] + -0xA47E))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_432,loc_key_433)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_433, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_59
IRDst = loc_key_59
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x21F0)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x21F0)
pf = parity((RAX[0:32] + -0x21F0) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x21F0)
of = FLAG_SUB_OF(RAX[0:32], 0x21F0)
af = ((RAX[0:32] ^ 0x21F0) ^ (RAX[0:32] + -0x21F0))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x21F0)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_60,loc_key_61)
IRDst = CC_EQ(zf)?(loc_key_60,loc_key_61)
[DEBUG] assignblk: RIP = loc_key_62
IRDst = loc_key_62
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_435
[DEBUG] assignblk: RAX = zeroExt_64(0x16B9D)
[DEBUG] assignblk: RCX = zeroExt_64(0xA47E)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x18], 0x1)
nf = FLAG_SIGN_SUB(@32[RSP + 0x18], 0x1)
pf = parity((@32[RSP + 0x18] + -0x1) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x18], 0x1)
of = FLAG_SUB_OF(@32[RSP + 0x18], 0x1)
af = ((@32[RSP + 0x18] ^ 0x1) ^ (@32[RSP + 0x18] + -0x1))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_434,loc_key_435)
[DEBUG] assignblk: @32[RSP + 0x30] = RAX[0:32]
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_435, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x23FC)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x23FC)
pf = parity((RAX[0:32] + -0x23FC) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x23FC)
of = FLAG_SUB_OF(RAX[0:32], 0x23FC)
af = ((RAX[0:32] ^ 0x23FC) ^ (RAX[0:32] + -0x23FC))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x23FC)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_63,loc_key_64)
IRDst = CC_EQ(zf)?(loc_key_63,loc_key_64)
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_63, 값: 0x17513
[DEBUG] assignblk: IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_65
IRDst = loc_key_65
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x2472)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x2472)
pf = parity((RAX[0:32] + -0x2472) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x2472)
of = FLAG_SUB_OF(RAX[0:32], 0x2472)
af = ((RAX[0:32] ^ 0x2472) ^ (RAX[0:32] + -0x2472))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x2472)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_66,loc_key_67)
IRDst = CC_EQ(zf)?(loc_key_66,loc_key_67)
[DEBUG] assignblk: RIP = loc_key_68
IRDst = loc_key_68
[DEBUG] assignblk: @32[RSP + 0x30] = 0x14125
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_66, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x2702)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x2702)
pf = parity((RAX[0:32] + -0x2702) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x2702)
of = FLAG_SUB_OF(RAX[0:32], 0x2702)
af = ((RAX[0:32] ^ 0x2702) ^ (RAX[0:32] + -0x2702))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x2702)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_69,loc_key_70)
IRDst = CC_EQ(zf)?(loc_key_69,loc_key_70)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_437
[DEBUG] assignblk: RAX = zeroExt_64(0xAD35)
[DEBUG] assignblk: RCX = zeroExt_64(0x142F5)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x10587)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x10587)
pf = parity((@32[RSP + 0x14] + -0x10587) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x10587)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x10587)
af = ((@32[RSP + 0x14] ^ 0x10587) ^ (@32[RSP + 0x14] + -0x10587))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_436,loc_key_437)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_437, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_71
IRDst = loc_key_71
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x2C34)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x2C34)
pf = parity((RAX[0:32] + -0x2C34) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x2C34)
of = FLAG_SUB_OF(RAX[0:32], 0x2C34)
af = ((RAX[0:32] ^ 0x2C34) ^ (RAX[0:32] + -0x2C34))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x2C34)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_72,loc_key_73)
IRDst = CC_EQ(zf)?(loc_key_72,loc_key_73)
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_72, 값: 0x17513
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_74
IRDst = loc_key_74
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x2F69)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x2F69)
pf = parity((RAX[0:32] + -0x2F69) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x2F69)
of = FLAG_SUB_OF(RAX[0:32], 0x2F69)
af = ((RAX[0:32] ^ 0x2F69) ^ (RAX[0:32] + -0x2F69))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x2F69)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_75,loc_key_76)
IRDst = CC_EQ(zf)?(loc_key_75,loc_key_76)
[DEBUG] assignblk: @32[RSP + 0x30] = 0x1ED3
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_75, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_77
IRDst = loc_key_77
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x32A4)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x32A4)
pf = parity((RAX[0:32] + -0x32A4) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x32A4)
of = FLAG_SUB_OF(RAX[0:32], 0x32A4)
af = ((RAX[0:32] ^ 0x32A4) ^ (RAX[0:32] + -0x32A4))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x32A4)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_78,loc_key_79)
IRDst = CC_EQ(zf)?(loc_key_78,loc_key_79)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_439
[DEBUG] assignblk: RAX = zeroExt_64(0x3C86)
[DEBUG] assignblk: RCX = zeroExt_64(0x21EB)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0xCAB1)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0xCAB1)
pf = parity((@32[RSP + 0x14] + -0xCAB1) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0xCAB1)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0xCAB1)
af = ((@32[RSP + 0x14] ^ 0xCAB1) ^ (@32[RSP + 0x14] + -0xCAB1))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_438,loc_key_439)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_439, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_80
IRDst = loc_key_80
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x335F)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x335F)
pf = parity((RAX[0:32] + -0x335F) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x335F)
of = FLAG_SUB_OF(RAX[0:32], 0x335F)
af = ((RAX[0:32] ^ 0x335F) ^ (RAX[0:32] + -0x335F))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x335F)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_81,loc_key_82)
IRDst = CC_EQ(zf)?(loc_key_81,loc_key_82)
[DEBUG] assignblk: @32[RSP + 0x30] = 0x9580
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_81, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_83
IRDst = loc_key_83
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x34A5)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x34A5)
pf = parity((RAX[0:32] + -0x34A5) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x34A5)
of = FLAG_SUB_OF(RAX[0:32], 0x34A5)
af = ((RAX[0:32] ^ 0x34A5) ^ (RAX[0:32] + -0x34A5))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x34A5)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_84,loc_key_85)
IRDst = CC_EQ(zf)?(loc_key_84,loc_key_85)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_441
[DEBUG] assignblk: RAX = zeroExt_64(0xBBCD)
[DEBUG] assignblk: RCX = zeroExt_64(0x14DA2)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x157CA)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x157CA)
pf = parity((@32[RSP + 0x14] + -0x157CA) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x157CA)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x157CA)
af = ((@32[RSP + 0x14] ^ 0x157CA) ^ (@32[RSP + 0x14] + -0x157CA))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_440,loc_key_441)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_441, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_86
IRDst = loc_key_86
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x37CC)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x37CC)
pf = parity((RAX[0:32] + -0x37CC) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x37CC)
of = FLAG_SUB_OF(RAX[0:32], 0x37CC)
af = ((RAX[0:32] ^ 0x37CC) ^ (RAX[0:32] + -0x37CC))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x37CC)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_87,loc_key_88)
IRDst = CC_EQ(zf)?(loc_key_87,loc_key_88)
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_87, 값: 0x17513
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_89
IRDst = loc_key_89
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x3C3C)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x3C3C)
pf = parity((RAX[0:32] + -0x3C3C) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x3C3C)
of = FLAG_SUB_OF(RAX[0:32], 0x3C3C)
af = ((RAX[0:32] ^ 0x3C3C) ^ (RAX[0:32] + -0x3C3C))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x3C3C)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_90,loc_key_91)
IRDst = CC_EQ(zf)?(loc_key_90,loc_key_91)
[DEBUG] assignblk: RIP = loc_key_92
IRDst = loc_key_92
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_90, 값: 0x17513
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x3C86)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x3C86)
pf = parity((RAX[0:32] + -0x3C86) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x3C86)
of = FLAG_SUB_OF(RAX[0:32], 0x3C86)
af = ((RAX[0:32] ^ 0x3C86) ^ (RAX[0:32] + -0x3C86))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x3C86)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_93,loc_key_94)
IRDst = CC_EQ(zf)?(loc_key_93,loc_key_94)
[DEBUG] assignblk: RIP = loc_key_95
IRDst = loc_key_95
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_443
[DEBUG] assignblk: RAX = zeroExt_64(0x1EF0)
[DEBUG] assignblk: RCX = zeroExt_64(0x4672)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0xCAB1)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0xCAB1)
pf = parity((@32[RSP + 0x14] + -0xCAB1) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0xCAB1)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0xCAB1)
af = ((@32[RSP + 0x14] ^ 0xCAB1) ^ (@32[RSP + 0x14] + -0xCAB1))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_442,loc_key_443)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_443, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x3EF7)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x3EF7)
pf = parity((RAX[0:32] + -0x3EF7) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x3EF7)
of = FLAG_SUB_OF(RAX[0:32], 0x3EF7)
af = ((RAX[0:32] ^ 0x3EF7) ^ (RAX[0:32] + -0x3EF7))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x3EF7)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_96,loc_key_97)
IRDst = CC_EQ(zf)?(loc_key_96,loc_key_97)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_445
[DEBUG] assignblk: RAX = zeroExt_64(0x15209)
[DEBUG] assignblk: RCX = zeroExt_64(0xC9F4)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x59CA)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x59CA)
pf = parity((@32[RSP + 0x14] + -0x59CA) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x59CA)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x59CA)
af = ((@32[RSP + 0x14] ^ 0x59CA) ^ (@32[RSP + 0x14] + -0x59CA))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_444,loc_key_445)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_445, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_98
IRDst = loc_key_98
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x403E)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x403E)
pf = parity((RAX[0:32] + -0x403E) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x403E)
of = FLAG_SUB_OF(RAX[0:32], 0x403E)
af = ((RAX[0:32] ^ 0x403E) ^ (RAX[0:32] + -0x403E))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x403E)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_99,loc_key_100)
IRDst = CC_EQ(zf)?(loc_key_99,loc_key_100)
[DEBUG] assignblk: RIP = loc_key_101
IRDst = loc_key_101
[DEBUG] assignblk: @32[RSP + 0x30] = 0x7200
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_99, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x418F)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x418F)
pf = parity((RAX[0:32] + -0x418F) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x418F)
of = FLAG_SUB_OF(RAX[0:32], 0x418F)
af = ((RAX[0:32] ^ 0x418F) ^ (RAX[0:32] + -0x418F))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x418F)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_102,loc_key_103)
IRDst = CC_EQ(zf)?(loc_key_102,loc_key_103)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_447
[DEBUG] assignblk: RAX = zeroExt_64(0x5DB0)
[DEBUG] assignblk: RCX = zeroExt_64(0x16BB2)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0xA1F9)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0xA1F9)
pf = parity((@32[RSP + 0x14] + -0xA1F9) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0xA1F9)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0xA1F9)
af = ((@32[RSP + 0x14] ^ 0xA1F9) ^ (@32[RSP + 0x14] + -0xA1F9))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_446,loc_key_447)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_447, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_104
IRDst = loc_key_104
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x4577)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x4577)
pf = parity((RAX[0:32] + -0x4577) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x4577)
of = FLAG_SUB_OF(RAX[0:32], 0x4577)
af = ((RAX[0:32] ^ 0x4577) ^ (RAX[0:32] + -0x4577))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x4577)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_105,loc_key_106)
IRDst = CC_EQ(zf)?(loc_key_105,loc_key_106)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_449
[DEBUG] assignblk: RAX = zeroExt_64(0xCEEA)
[DEBUG] assignblk: RCX = zeroExt_64(0xD018)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x1767E)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x1767E)
pf = parity((@32[RSP + 0x14] + -0x1767E) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x1767E)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x1767E)
af = ((@32[RSP + 0x14] ^ 0x1767E) ^ (@32[RSP + 0x14] + -0x1767E))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_448,loc_key_449)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_449, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_107
IRDst = loc_key_107
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x4672)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x4672)
pf = parity((RAX[0:32] + -0x4672) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x4672)
of = FLAG_SUB_OF(RAX[0:32], 0x4672)
af = ((RAX[0:32] ^ 0x4672) ^ (RAX[0:32] + -0x4672))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x4672)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_108,loc_key_109)
IRDst = CC_EQ(zf)?(loc_key_108,loc_key_109)
[DEBUG] assignblk: RIP = loc_key_110
IRDst = loc_key_110
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0x1C])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], -0x1)
nf = FLAG_SIGN_SUB(RAX[0:32], -0x1)
pf = parity((RAX[0:32] + 0x1) & 0xFF)
cf = FLAG_ADD_CF(RAX[0:32], 0x1)
of = FLAG_ADD_OF(RAX[0:32], 0x1)
af = ((RAX[0:32] ^ 0x1) ^ (RAX[0:32] + 0x1))[4:5]
RAX = zeroExt_64(RAX[0:32] + 0x1)
[DEBUG] assignblk: @32[RSP + 0x1C] = RAX[0:32]
[DEBUG] assignblk: @32[RSP + 0x30] = 0x14FA
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_108, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x4E58)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x4E58)
pf = parity((RAX[0:32] + -0x4E58) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x4E58)
of = FLAG_SUB_OF(RAX[0:32], 0x4E58)
af = ((RAX[0:32] ^ 0x4E58) ^ (RAX[0:32] + -0x4E58))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x4E58)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_111,loc_key_112)
IRDst = CC_EQ(zf)?(loc_key_111,loc_key_112)
[DEBUG] assignblk: @32[RSP + 0x30] = 0x157CA
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_111, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_113
IRDst = loc_key_113
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x4F56)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x4F56)
pf = parity((RAX[0:32] + -0x4F56) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x4F56)
of = FLAG_SUB_OF(RAX[0:32], 0x4F56)
af = ((RAX[0:32] ^ 0x4F56) ^ (RAX[0:32] + -0x4F56))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x4F56)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_114,loc_key_115)
IRDst = CC_EQ(zf)?(loc_key_114,loc_key_115)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_451
[DEBUG] assignblk: RAX = zeroExt_64(0xEF9C)
[DEBUG] assignblk: RCX = zeroExt_64(0x18426)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x147A9)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x147A9)
pf = parity((@32[RSP + 0x14] + -0x147A9) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x147A9)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x147A9)
af = ((@32[RSP + 0x14] ^ 0x147A9) ^ (@32[RSP + 0x14] + -0x147A9))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_450,loc_key_451)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_451, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_116
IRDst = loc_key_116
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x5A34)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x5A34)
pf = parity((RAX[0:32] + -0x5A34) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x5A34)
of = FLAG_SUB_OF(RAX[0:32], 0x5A34)
af = ((RAX[0:32] ^ 0x5A34) ^ (RAX[0:32] + -0x5A34))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x5A34)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_117,loc_key_118)
IRDst = CC_EQ(zf)?(loc_key_117,loc_key_118)
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_117, 값: 0x17513
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_119
IRDst = loc_key_119
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x5CF0)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x5CF0)
pf = parity((RAX[0:32] + -0x5CF0) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x5CF0)
of = FLAG_SUB_OF(RAX[0:32], 0x5CF0)
af = ((RAX[0:32] ^ 0x5CF0) ^ (RAX[0:32] + -0x5CF0))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x5CF0)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_120,loc_key_121)
IRDst = CC_EQ(zf)?(loc_key_120,loc_key_121)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_453
[DEBUG] assignblk: RAX = zeroExt_64(0x84C0)
[DEBUG] assignblk: RCX = zeroExt_64(0xCD60)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x1535C)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x1535C)
pf = parity((@32[RSP + 0x14] + -0x1535C) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x1535C)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x1535C)
af = ((@32[RSP + 0x14] ^ 0x1535C) ^ (@32[RSP + 0x14] + -0x1535C))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_452,loc_key_453)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_453, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_122
IRDst = loc_key_122
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x5DB0)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x5DB0)
pf = parity((RAX[0:32] + -0x5DB0) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x5DB0)
of = FLAG_SUB_OF(RAX[0:32], 0x5DB0)
af = ((RAX[0:32] ^ 0x5DB0) ^ (RAX[0:32] + -0x5DB0))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x5DB0)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_123,loc_key_124)
IRDst = CC_EQ(zf)?(loc_key_123,loc_key_124)
[DEBUG] assignblk: RIP = loc_key_125
IRDst = loc_key_125
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_123, 값: 0x17513
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x6043)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x6043)
pf = parity((RAX[0:32] + -0x6043) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x6043)
of = FLAG_SUB_OF(RAX[0:32], 0x6043)
af = ((RAX[0:32] ^ 0x6043) ^ (RAX[0:32] + -0x6043))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x6043)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_126,loc_key_127)
IRDst = CC_EQ(zf)?(loc_key_126,loc_key_127)
[DEBUG] assignblk: RIP = loc_key_128
IRDst = loc_key_128
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_455
[DEBUG] assignblk: RAX = zeroExt_64(0x1B44)
[DEBUG] assignblk: RCX = zeroExt_64(0x11DDB)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x30F1)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x30F1)
pf = parity((@32[RSP + 0x14] + -0x30F1) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x30F1)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x30F1)
af = ((@32[RSP + 0x14] ^ 0x30F1) ^ (@32[RSP + 0x14] + -0x30F1))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_454,loc_key_455)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_455, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x6155)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x6155)
pf = parity((RAX[0:32] + -0x6155) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x6155)
of = FLAG_SUB_OF(RAX[0:32], 0x6155)
af = ((RAX[0:32] ^ 0x6155) ^ (RAX[0:32] + -0x6155))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x6155)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_129,loc_key_130)
IRDst = CC_EQ(zf)?(loc_key_129,loc_key_130)
[DEBUG] assignblk: RIP = loc_key_131
IRDst = loc_key_131
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_457
[DEBUG] assignblk: RAX = zeroExt_64(0x10458)
[DEBUG] assignblk: RCX = zeroExt_64(0x9F2)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x28], 0xA)
nf = FLAG_SIGN_SUB(@32[RSP + 0x28], 0xA)
pf = parity((@32[RSP + 0x28] + -0xA) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x28], 0xA)
of = FLAG_SUB_OF(@32[RSP + 0x28], 0xA)
af = ((@32[RSP + 0x28] ^ 0xA) ^ (@32[RSP + 0x28] + -0xA))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S>(nf, of, zf)?(loc_key_456,loc_key_457)
[DEBUG] assignblk: @32[RSP + 0x30] = RAX[0:32]
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_457, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x6382)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x6382)
pf = parity((RAX[0:32] + -0x6382) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x6382)
of = FLAG_SUB_OF(RAX[0:32], 0x6382)
af = ((RAX[0:32] ^ 0x6382) ^ (RAX[0:32] + -0x6382))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x6382)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_132,loc_key_133)
IRDst = CC_EQ(zf)?(loc_key_132,loc_key_133)
[DEBUG] assignblk: RIP = loc_key_134
IRDst = loc_key_134
[DEBUG] assignblk: @32[RSP + 0x1C] = 0x0
[DEBUG] assignblk: @32[RSP + 0x30] = 0x14FA
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_132, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x6724)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x6724)
pf = parity((RAX[0:32] + -0x6724) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x6724)
of = FLAG_SUB_OF(RAX[0:32], 0x6724)
af = ((RAX[0:32] ^ 0x6724) ^ (RAX[0:32] + -0x6724))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x6724)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_135,loc_key_136)
IRDst = CC_EQ(zf)?(loc_key_135,loc_key_136)
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0x10])
[DEBUG] assignblk: @32[RSP + 0x14] = RAX[0:32]
[DEBUG] assignblk: @32[RSP + 0x34] = 0x910A
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x910A
[DEBUG] 패치 대상 추가: 블록 loc_key_135, 값: 0x910A
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_137
IRDst = loc_key_137
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x67B4)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x67B4)
pf = parity((RAX[0:32] + -0x67B4) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x67B4)
of = FLAG_SUB_OF(RAX[0:32], 0x67B4)
af = ((RAX[0:32] ^ 0x67B4) ^ (RAX[0:32] + -0x67B4))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x67B4)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_138,loc_key_139)
IRDst = CC_EQ(zf)?(loc_key_138,loc_key_139)
[DEBUG] assignblk: RIP = loc_key_140
IRDst = loc_key_140
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_459
[DEBUG] assignblk: RAX = zeroExt_64(0xF4DD)
[DEBUG] assignblk: RCX = zeroExt_64(0x67CB)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x9580)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x9580)
pf = parity((@32[RSP + 0x14] + -0x9580) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x9580)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x9580)
af = ((@32[RSP + 0x14] ^ 0x9580) ^ (@32[RSP + 0x14] + -0x9580))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_458,loc_key_459)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_459, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x67CB)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x67CB)
pf = parity((RAX[0:32] + -0x67CB) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x67CB)
of = FLAG_SUB_OF(RAX[0:32], 0x67CB)
af = ((RAX[0:32] ^ 0x67CB) ^ (RAX[0:32] + -0x67CB))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x67CB)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_141,loc_key_142)
IRDst = CC_EQ(zf)?(loc_key_141,loc_key_142)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_461
[DEBUG] assignblk: RAX = zeroExt_64(0x3C3C)
[DEBUG] assignblk: RCX = zeroExt_64(0x14272)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x9467)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x9467)
pf = parity((@32[RSP + 0x14] + -0x9467) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x9467)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x9467)
af = ((@32[RSP + 0x14] ^ 0x9467) ^ (@32[RSP + 0x14] + -0x9467))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_460,loc_key_461)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_461, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_143
IRDst = loc_key_143
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x6977)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x6977)
pf = parity((RAX[0:32] + -0x6977) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x6977)
of = FLAG_SUB_OF(RAX[0:32], 0x6977)
af = ((RAX[0:32] ^ 0x6977) ^ (RAX[0:32] + -0x6977))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x6977)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_144,loc_key_145)
IRDst = CC_EQ(zf)?(loc_key_144,loc_key_145)
[DEBUG] assignblk: RIP = loc_key_146
IRDst = loc_key_146
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0x24])
[DEBUG] assignblk: @32[RSP + 0x18] = RAX[0:32]
[DEBUG] assignblk: @32[RSP + 0x30] = 0x13FE8
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_144, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x698D)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x698D)
pf = parity((RAX[0:32] + -0x698D) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x698D)
of = FLAG_SUB_OF(RAX[0:32], 0x698D)
af = ((RAX[0:32] ^ 0x698D) ^ (RAX[0:32] + -0x698D))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x698D)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_147,loc_key_148)
IRDst = CC_EQ(zf)?(loc_key_147,loc_key_148)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_463
[DEBUG] assignblk: RAX = zeroExt_64(0xF2AF)
[DEBUG] assignblk: RCX = zeroExt_64(0x21F0)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x13FE8)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x13FE8)
pf = parity((@32[RSP + 0x14] + -0x13FE8) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x13FE8)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x13FE8)
af = ((@32[RSP + 0x14] ^ 0x13FE8) ^ (@32[RSP + 0x14] + -0x13FE8))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_462,loc_key_463)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_463, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_149
IRDst = loc_key_149
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x6BC1)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x6BC1)
pf = parity((RAX[0:32] + -0x6BC1) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x6BC1)
of = FLAG_SUB_OF(RAX[0:32], 0x6BC1)
af = ((RAX[0:32] ^ 0x6BC1) ^ (RAX[0:32] + -0x6BC1))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x6BC1)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_150,loc_key_151)
IRDst = CC_EQ(zf)?(loc_key_150,loc_key_151)
[DEBUG] assignblk: RIP = loc_key_152
IRDst = loc_key_152
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_465
[DEBUG] assignblk: RAX = zeroExt_64(0x1480D)
[DEBUG] assignblk: RCX = zeroExt_64(0xD4F2)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0xD39B)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0xD39B)
pf = parity((@32[RSP + 0x14] + -0xD39B) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0xD39B)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0xD39B)
af = ((@32[RSP + 0x14] ^ 0xD39B) ^ (@32[RSP + 0x14] + -0xD39B))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_464,loc_key_465)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_465, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x6CB0)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x6CB0)
pf = parity((RAX[0:32] + -0x6CB0) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x6CB0)
of = FLAG_SUB_OF(RAX[0:32], 0x6CB0)
af = ((RAX[0:32] ^ 0x6CB0) ^ (RAX[0:32] + -0x6CB0))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x6CB0)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_153,loc_key_154)
IRDst = CC_EQ(zf)?(loc_key_153,loc_key_154)
[DEBUG] assignblk: RIP = loc_key_155
IRDst = loc_key_155
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_153, 값: 0x17513
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x6D96)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x6D96)
pf = parity((RAX[0:32] + -0x6D96) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x6D96)
of = FLAG_SUB_OF(RAX[0:32], 0x6D96)
af = ((RAX[0:32] ^ 0x6D96) ^ (RAX[0:32] + -0x6D96))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x6D96)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_156,loc_key_157)
IRDst = CC_EQ(zf)?(loc_key_156,loc_key_157)
[DEBUG] assignblk: RIP = loc_key_158
IRDst = loc_key_158
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_156, 값: 0x17513
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x6EAA)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x6EAA)
pf = parity((RAX[0:32] + -0x6EAA) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x6EAA)
of = FLAG_SUB_OF(RAX[0:32], 0x6EAA)
af = ((RAX[0:32] ^ 0x6EAA) ^ (RAX[0:32] + -0x6EAA))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x6EAA)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_159,loc_key_160)
IRDst = CC_EQ(zf)?(loc_key_159,loc_key_160)
[DEBUG] assignblk: RIP = loc_key_161
IRDst = loc_key_161
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_467
[DEBUG] assignblk: RAX = zeroExt_64(0x17C98)
[DEBUG] assignblk: RCX = zeroExt_64(0x418F)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0xA343)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0xA343)
pf = parity((@32[RSP + 0x14] + -0xA343) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0xA343)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0xA343)
af = ((@32[RSP + 0x14] ^ 0xA343) ^ (@32[RSP + 0x14] + -0xA343))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_466,loc_key_467)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_467, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x6FE6)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x6FE6)
pf = parity((RAX[0:32] + -0x6FE6) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x6FE6)
of = FLAG_SUB_OF(RAX[0:32], 0x6FE6)
af = ((RAX[0:32] ^ 0x6FE6) ^ (RAX[0:32] + -0x6FE6))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x6FE6)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_162,loc_key_163)
IRDst = CC_EQ(zf)?(loc_key_162,loc_key_163)
[DEBUG] assignblk: RIP = loc_key_164
IRDst = loc_key_164
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_469
[DEBUG] assignblk: RAX = zeroExt_64(0x11AAE)
[DEBUG] assignblk: RCX = zeroExt_64(0x99B1)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x14FA)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x14FA)
pf = parity((@32[RSP + 0x14] + -0x14FA) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x14FA)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x14FA)
af = ((@32[RSP + 0x14] ^ 0x14FA) ^ (@32[RSP + 0x14] + -0x14FA))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_468,loc_key_469)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_469, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x70C6)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x70C6)
pf = parity((RAX[0:32] + -0x70C6) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x70C6)
of = FLAG_SUB_OF(RAX[0:32], 0x70C6)
af = ((RAX[0:32] ^ 0x70C6) ^ (RAX[0:32] + -0x70C6))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x70C6)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_165,loc_key_166)
IRDst = CC_EQ(zf)?(loc_key_165,loc_key_166)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_471
[DEBUG] assignblk: RAX = zeroExt_64(0x3EF7)
[DEBUG] assignblk: RCX = zeroExt_64(0x6043)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x52C4)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x52C4)
pf = parity((@32[RSP + 0x14] + -0x52C4) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x52C4)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x52C4)
af = ((@32[RSP + 0x14] ^ 0x52C4) ^ (@32[RSP + 0x14] + -0x52C4))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_470,loc_key_471)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_471, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_167
IRDst = loc_key_167
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x71E4)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x71E4)
pf = parity((RAX[0:32] + -0x71E4) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x71E4)
of = FLAG_SUB_OF(RAX[0:32], 0x71E4)
af = ((RAX[0:32] ^ 0x71E4) ^ (RAX[0:32] + -0x71E4))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x71E4)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_168,loc_key_169)
IRDst = CC_EQ(zf)?(loc_key_168,loc_key_169)
[DEBUG] assignblk: RIP = loc_key_170
IRDst = loc_key_170
[DEBUG] assignblk: @32[RSP + 0x30] = 0x9467
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_168, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x7206)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x7206)
pf = parity((RAX[0:32] + -0x7206) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x7206)
of = FLAG_SUB_OF(RAX[0:32], 0x7206)
af = ((RAX[0:32] ^ 0x7206) ^ (RAX[0:32] + -0x7206))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x7206)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_171,loc_key_172)
IRDst = CC_EQ(zf)?(loc_key_171,loc_key_172)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_473
[DEBUG] assignblk: RAX = zeroExt_64(0x59CA)
[DEBUG] assignblk: RCX = zeroExt_64(0x1767E)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x18], 0x2)
nf = FLAG_SIGN_SUB(@32[RSP + 0x18], 0x2)
pf = parity((@32[RSP + 0x18] + -0x2) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x18], 0x2)
of = FLAG_SUB_OF(@32[RSP + 0x18], 0x2)
af = ((@32[RSP + 0x18] ^ 0x2) ^ (@32[RSP + 0x18] + -0x2))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_472,loc_key_473)
[DEBUG] assignblk: @32[RSP + 0x30] = RAX[0:32]
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_473, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_173
IRDst = loc_key_173
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x72F4)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x72F4)
pf = parity((RAX[0:32] + -0x72F4) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x72F4)
of = FLAG_SUB_OF(RAX[0:32], 0x72F4)
af = ((RAX[0:32] ^ 0x72F4) ^ (RAX[0:32] + -0x72F4))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x72F4)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_174,loc_key_175)
IRDst = CC_EQ(zf)?(loc_key_174,loc_key_175)
[DEBUG] assignblk: RIP = loc_key_176
IRDst = loc_key_176
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_475
[DEBUG] assignblk: RAX = zeroExt_64(0xCB23)
[DEBUG] assignblk: RCX = zeroExt_64(0x7EFD)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x127E)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x127E)
pf = parity((@32[RSP + 0x14] + -0x127E) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x127E)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x127E)
af = ((@32[RSP + 0x14] ^ 0x127E) ^ (@32[RSP + 0x14] + -0x127E))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_474,loc_key_475)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_475, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x741A)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x741A)
pf = parity((RAX[0:32] + -0x741A) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x741A)
of = FLAG_SUB_OF(RAX[0:32], 0x741A)
af = ((RAX[0:32] ^ 0x741A) ^ (RAX[0:32] + -0x741A))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x741A)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_177,loc_key_178)
IRDst = CC_EQ(zf)?(loc_key_177,loc_key_178)
[DEBUG] assignblk: RIP = loc_key_179
IRDst = loc_key_179
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_477
[DEBUG] assignblk: RAX = zeroExt_64(0x30F1)
[DEBUG] assignblk: RCX = zeroExt_64(0x146A)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x18], 0x2)
nf = FLAG_SIGN_SUB(@32[RSP + 0x18], 0x2)
pf = parity((@32[RSP + 0x18] + -0x2) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x18], 0x2)
of = FLAG_SUB_OF(@32[RSP + 0x18], 0x2)
af = ((@32[RSP + 0x18] ^ 0x2) ^ (@32[RSP + 0x18] + -0x2))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_476,loc_key_477)
[DEBUG] assignblk: @32[RSP + 0x30] = RAX[0:32]
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_477, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x7815)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x7815)
pf = parity((RAX[0:32] + -0x7815) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x7815)
of = FLAG_SUB_OF(RAX[0:32], 0x7815)
af = ((RAX[0:32] ^ 0x7815) ^ (RAX[0:32] + -0x7815))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x7815)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_180,loc_key_181)
IRDst = CC_EQ(zf)?(loc_key_180,loc_key_181)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_479
[DEBUG] assignblk: RAX = zeroExt_64(0xA343)
[DEBUG] assignblk: RCX = zeroExt_64(0x11D36)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x28], 0x0)
nf = FLAG_SIGN_SUB(@32[RSP + 0x28], 0x0)
pf = parity((@32[RSP + 0x28] + -0x0) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x28], 0x0)
of = FLAG_SUB_OF(@32[RSP + 0x28], 0x0)
af = ((@32[RSP + 0x28] ^ 0x0) ^ (@32[RSP + 0x28] + -0x0))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S>(nf, of, zf)?(loc_key_478,loc_key_479)
[DEBUG] assignblk: @32[RSP + 0x30] = RAX[0:32]
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_479, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_182
IRDst = loc_key_182
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x7942)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x7942)
pf = parity((RAX[0:32] + -0x7942) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x7942)
of = FLAG_SUB_OF(RAX[0:32], 0x7942)
af = ((RAX[0:32] ^ 0x7942) ^ (RAX[0:32] + -0x7942))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x7942)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_183,loc_key_184)
IRDst = CC_EQ(zf)?(loc_key_183,loc_key_184)
[DEBUG] assignblk: RIP = loc_key_185
IRDst = loc_key_185
[DEBUG] assignblk: @32[RSP + 0x30] = 0x1535C
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_183, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x7EFD)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x7EFD)
pf = parity((RAX[0:32] + -0x7EFD) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x7EFD)
of = FLAG_SUB_OF(RAX[0:32], 0x7EFD)
af = ((RAX[0:32] ^ 0x7EFD) ^ (RAX[0:32] + -0x7EFD))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x7EFD)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_186,loc_key_187)
IRDst = CC_EQ(zf)?(loc_key_186,loc_key_187)
[DEBUG] assignblk: RIP = loc_key_188
IRDst = loc_key_188
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_481
[DEBUG] assignblk: RAX = zeroExt_64(0x23FC)
[DEBUG] assignblk: RCX = zeroExt_64(0xE372)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x9F2)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x9F2)
pf = parity((@32[RSP + 0x14] + -0x9F2) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x9F2)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x9F2)
af = ((@32[RSP + 0x14] ^ 0x9F2) ^ (@32[RSP + 0x14] + -0x9F2))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_480,loc_key_481)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_481, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x826C)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x826C)
pf = parity((RAX[0:32] + -0x826C) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x826C)
of = FLAG_SUB_OF(RAX[0:32], 0x826C)
af = ((RAX[0:32] ^ 0x826C) ^ (RAX[0:32] + -0x826C))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x826C)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_189,loc_key_190)
IRDst = CC_EQ(zf)?(loc_key_189,loc_key_190)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_483
[DEBUG] assignblk: RAX = zeroExt_64(0x123F1)
[DEBUG] assignblk: RCX = zeroExt_64(0xAC12)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x7200)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x7200)
pf = parity((@32[RSP + 0x14] + -0x7200) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x7200)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x7200)
af = ((@32[RSP + 0x14] ^ 0x7200) ^ (@32[RSP + 0x14] + -0x7200))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_482,loc_key_483)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_483, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_191
IRDst = loc_key_191
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x8492)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x8492)
pf = parity((RAX[0:32] + -0x8492) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x8492)
of = FLAG_SUB_OF(RAX[0:32], 0x8492)
af = ((RAX[0:32] ^ 0x8492) ^ (RAX[0:32] + -0x8492))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x8492)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_192,loc_key_193)
IRDst = CC_EQ(zf)?(loc_key_192,loc_key_193)
[DEBUG] assignblk: RIP = loc_key_194
IRDst = loc_key_194
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_485
[DEBUG] assignblk: RAX = zeroExt_64(0x98CE)
[DEBUG] assignblk: RCX = zeroExt_64(0x17C26)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x7200)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x7200)
pf = parity((@32[RSP + 0x14] + -0x7200) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x7200)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x7200)
af = ((@32[RSP + 0x14] ^ 0x7200) ^ (@32[RSP + 0x14] + -0x7200))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_484,loc_key_485)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_485, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x84C0)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x84C0)
pf = parity((RAX[0:32] + -0x84C0) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x84C0)
of = FLAG_SUB_OF(RAX[0:32], 0x84C0)
af = ((RAX[0:32] ^ 0x84C0) ^ (RAX[0:32] + -0x84C0))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x84C0)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_195,loc_key_196)
IRDst = CC_EQ(zf)?(loc_key_195,loc_key_196)
[DEBUG] assignblk: RIP = loc_key_197
IRDst = loc_key_197
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_487
[DEBUG] assignblk: RAX = zeroExt_64(0x1390B)
[DEBUG] assignblk: RCX = zeroExt_64(0x34A5)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x16B9D)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x16B9D)
pf = parity((@32[RSP + 0x14] + -0x16B9D) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x16B9D)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x16B9D)
af = ((@32[RSP + 0x14] ^ 0x16B9D) ^ (@32[RSP + 0x14] + -0x16B9D))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_486,loc_key_487)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_487, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x910A)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x910A)
pf = parity((RAX[0:32] + -0x910A) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x910A)
of = FLAG_SUB_OF(RAX[0:32], 0x910A)
af = ((RAX[0:32] ^ 0x910A) ^ (RAX[0:32] + -0x910A))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x910A)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_198,loc_key_199)
IRDst = CC_EQ(zf)?(loc_key_198,loc_key_199)
[DEBUG] assignblk: RIP = loc_key_200
IRDst = loc_key_200
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_489
[DEBUG] assignblk: RAX = zeroExt_64(0x159AF)
[DEBUG] assignblk: RCX = zeroExt_64(0x8492)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0xA47E)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0xA47E)
pf = parity((@32[RSP + 0x14] + -0xA47E) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0xA47E)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0xA47E)
af = ((@32[RSP + 0x14] ^ 0xA47E) ^ (@32[RSP + 0x14] + -0xA47E))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_488,loc_key_489)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_489, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x9481)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x9481)
pf = parity((RAX[0:32] + -0x9481) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x9481)
of = FLAG_SUB_OF(RAX[0:32], 0x9481)
af = ((RAX[0:32] ^ 0x9481) ^ (RAX[0:32] + -0x9481))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x9481)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_201,loc_key_202)
IRDst = CC_EQ(zf)?(loc_key_201,loc_key_202)
[DEBUG] assignblk: RIP = loc_key_203
IRDst = loc_key_203
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_491
[DEBUG] assignblk: RAX = zeroExt_64(0x1697A)
[DEBUG] assignblk: RCX = zeroExt_64(0x32A4)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0xD39B)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0xD39B)
pf = parity((@32[RSP + 0x14] + -0xD39B) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0xD39B)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0xD39B)
af = ((@32[RSP + 0x14] ^ 0xD39B) ^ (@32[RSP + 0x14] + -0xD39B))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_490,loc_key_491)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_491, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x959C)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x959C)
pf = parity((RAX[0:32] + -0x959C) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x959C)
of = FLAG_SUB_OF(RAX[0:32], 0x959C)
af = ((RAX[0:32] ^ 0x959C) ^ (RAX[0:32] + -0x959C))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x959C)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_204,loc_key_205)
IRDst = CC_EQ(zf)?(loc_key_204,loc_key_205)
[DEBUG] assignblk: RIP = loc_key_206
IRDst = loc_key_206
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0x28])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], -@32[RSP + 0x20])
nf = FLAG_SIGN_SUB(RAX[0:32], -@32[RSP + 0x20])
pf = parity((RAX[0:32] + @32[RSP + 0x20]) & 0xFF)
cf = FLAG_ADD_CF(RAX[0:32], @32[RSP + 0x20])
of = FLAG_ADD_OF(RAX[0:32], @32[RSP + 0x20])
af = ((RAX[0:32] ^ @32[RSP + 0x20]) ^ (RAX[0:32] + @32[RSP + 0x20]))[4:5]
RAX = zeroExt_64(RAX[0:32] + @32[RSP + 0x20])
[DEBUG] assignblk: @32[RSP + 0x20] = RAX[0:32]
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0x28])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], -0xFFFFFFFF)
nf = FLAG_SIGN_SUB(RAX[0:32], -0xFFFFFFFF)
pf = parity((RAX[0:32] + 0xFFFFFFFF) & 0xFF)
cf = FLAG_ADD_CF(RAX[0:32], 0xFFFFFFFF)
of = FLAG_ADD_OF(RAX[0:32], 0xFFFFFFFF)
af = ((RAX[0:32] ^ 0xFFFFFFFF) ^ (RAX[0:32] + 0xFFFFFFFF))[4:5]
RAX = zeroExt_64(RAX[0:32] + 0xFFFFFFFF)
[DEBUG] assignblk: @32[RSP + 0x28] = RAX[0:32]
[DEBUG] assignblk: @32[RSP + 0x30] = 0x147A9
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_204, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x98CE)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x98CE)
pf = parity((RAX[0:32] + -0x98CE) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x98CE)
of = FLAG_SUB_OF(RAX[0:32], 0x98CE)
af = ((RAX[0:32] ^ 0x98CE) ^ (RAX[0:32] + -0x98CE))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x98CE)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_207,loc_key_208)
IRDst = CC_EQ(zf)?(loc_key_207,loc_key_208)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_493
[DEBUG] assignblk: RAX = zeroExt_64(0xA55)
[DEBUG] assignblk: RCX = zeroExt_64(0x10285)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x9467)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x9467)
pf = parity((@32[RSP + 0x14] + -0x9467) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x9467)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x9467)
af = ((@32[RSP + 0x14] ^ 0x9467) ^ (@32[RSP + 0x14] + -0x9467))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_492,loc_key_493)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_493, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_209
IRDst = loc_key_209
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x998A)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x998A)
pf = parity((RAX[0:32] + -0x998A) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x998A)
of = FLAG_SUB_OF(RAX[0:32], 0x998A)
af = ((RAX[0:32] ^ 0x998A) ^ (RAX[0:32] + -0x998A))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x998A)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_210,loc_key_211)
IRDst = CC_EQ(zf)?(loc_key_210,loc_key_211)
[DEBUG] assignblk: RIP = loc_key_212
IRDst = loc_key_212
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_495
[DEBUG] assignblk: RAX = zeroExt_64(0x130D1)
[DEBUG] assignblk: RCX = zeroExt_64(0x845)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x8B98)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x8B98)
pf = parity((@32[RSP + 0x14] + -0x8B98) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x8B98)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x8B98)
af = ((@32[RSP + 0x14] ^ 0x8B98) ^ (@32[RSP + 0x14] + -0x8B98))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_494,loc_key_495)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_495, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x99B1)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x99B1)
pf = parity((RAX[0:32] + -0x99B1) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x99B1)
of = FLAG_SUB_OF(RAX[0:32], 0x99B1)
af = ((RAX[0:32] ^ 0x99B1) ^ (RAX[0:32] + -0x99B1))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x99B1)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_213,loc_key_214)
IRDst = CC_EQ(zf)?(loc_key_213,loc_key_214)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_497
[DEBUG] assignblk: RAX = zeroExt_64(0xF72C)
[DEBUG] assignblk: RCX = zeroExt_64(0x6382)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x146A)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x146A)
pf = parity((@32[RSP + 0x14] + -0x146A) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x146A)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x146A)
af = ((@32[RSP + 0x14] ^ 0x146A) ^ (@32[RSP + 0x14] + -0x146A))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_496,loc_key_497)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_497, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_215
IRDst = loc_key_215
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x9E6B)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x9E6B)
pf = parity((RAX[0:32] + -0x9E6B) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x9E6B)
of = FLAG_SUB_OF(RAX[0:32], 0x9E6B)
af = ((RAX[0:32] ^ 0x9E6B) ^ (RAX[0:32] + -0x9E6B))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x9E6B)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_216,loc_key_217)
IRDst = CC_EQ(zf)?(loc_key_216,loc_key_217)
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_216, 값: 0x17513
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_218
IRDst = loc_key_218
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xAAE1)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xAAE1)
pf = parity((RAX[0:32] + -0xAAE1) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xAAE1)
of = FLAG_SUB_OF(RAX[0:32], 0xAAE1)
af = ((RAX[0:32] ^ 0xAAE1) ^ (RAX[0:32] + -0xAAE1))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xAAE1)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_219,loc_key_220)
IRDst = CC_EQ(zf)?(loc_key_219,loc_key_220)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_499
[DEBUG] assignblk: RAX = zeroExt_64(0x1056A)
[DEBUG] assignblk: RCX = zeroExt_64(0x959C)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x101A9)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x101A9)
pf = parity((@32[RSP + 0x14] + -0x101A9) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x101A9)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x101A9)
af = ((@32[RSP + 0x14] ^ 0x101A9) ^ (@32[RSP + 0x14] + -0x101A9))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_498,loc_key_499)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_499, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_221
IRDst = loc_key_221
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xAC12)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xAC12)
pf = parity((RAX[0:32] + -0xAC12) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xAC12)
of = FLAG_SUB_OF(RAX[0:32], 0xAC12)
af = ((RAX[0:32] ^ 0xAC12) ^ (RAX[0:32] + -0xAC12))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xAC12)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_222,loc_key_223)
IRDst = CC_EQ(zf)?(loc_key_222,loc_key_223)
[DEBUG] assignblk: RIP = loc_key_224
IRDst = loc_key_224
[DEBUG] assignblk: @32[RSP + 0x24] = 0xFFFFFFFF
[DEBUG] assignblk: @32[RSP + 0x30] = 0x14125
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_222, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xAD35)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xAD35)
pf = parity((RAX[0:32] + -0xAD35) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xAD35)
of = FLAG_SUB_OF(RAX[0:32], 0xAD35)
af = ((RAX[0:32] ^ 0xAD35) ^ (RAX[0:32] + -0xAD35))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xAD35)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_225,loc_key_226)
IRDst = CC_EQ(zf)?(loc_key_225,loc_key_226)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_501
[DEBUG] assignblk: RAX = zeroExt_64(0xB120)
[DEBUG] assignblk: RCX = zeroExt_64(0x403E)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x10587)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x10587)
pf = parity((@32[RSP + 0x14] + -0x10587) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x10587)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x10587)
af = ((@32[RSP + 0x14] ^ 0x10587) ^ (@32[RSP + 0x14] + -0x10587))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_500,loc_key_501)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_501, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_227
IRDst = loc_key_227
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xB120)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xB120)
pf = parity((RAX[0:32] + -0xB120) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xB120)
of = FLAG_SUB_OF(RAX[0:32], 0xB120)
af = ((RAX[0:32] ^ 0xB120) ^ (RAX[0:32] + -0xB120))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xB120)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_228,loc_key_229)
IRDst = CC_EQ(zf)?(loc_key_228,loc_key_229)
[DEBUG] assignblk: RIP = loc_key_230
IRDst = loc_key_230
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_228, 값: 0x17513
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xB3D4)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xB3D4)
pf = parity((RAX[0:32] + -0xB3D4) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xB3D4)
of = FLAG_SUB_OF(RAX[0:32], 0xB3D4)
af = ((RAX[0:32] ^ 0xB3D4) ^ (RAX[0:32] + -0xB3D4))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xB3D4)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_231,loc_key_232)
IRDst = CC_EQ(zf)?(loc_key_231,loc_key_232)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_503
[DEBUG] assignblk: RAX = zeroExt_64(0x4F56)
[DEBUG] assignblk: RCX = zeroExt_64(0xF3A1)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x147A9)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x147A9)
pf = parity((@32[RSP + 0x14] + -0x147A9) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x147A9)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x147A9)
af = ((@32[RSP + 0x14] ^ 0x147A9) ^ (@32[RSP + 0x14] + -0x147A9))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_502,loc_key_503)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_503, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_233
IRDst = loc_key_233
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xBBCD)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xBBCD)
pf = parity((RAX[0:32] + -0xBBCD) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xBBCD)
of = FLAG_SUB_OF(RAX[0:32], 0xBBCD)
af = ((RAX[0:32] ^ 0xBBCD) ^ (RAX[0:32] + -0xBBCD))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xBBCD)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_234,loc_key_235)
IRDst = CC_EQ(zf)?(loc_key_234,loc_key_235)
[DEBUG] assignblk: RIP = loc_key_236
IRDst = loc_key_236
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_505
[DEBUG] assignblk: RAX = zeroExt_64(0x154BA)
[DEBUG] assignblk: RCX = zeroExt_64(0x71E4)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x157CA)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x157CA)
pf = parity((@32[RSP + 0x14] + -0x157CA) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x157CA)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x157CA)
af = ((@32[RSP + 0x14] ^ 0x157CA) ^ (@32[RSP + 0x14] + -0x157CA))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_504,loc_key_505)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_505, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xC9F4)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xC9F4)
pf = parity((RAX[0:32] + -0xC9F4) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xC9F4)
of = FLAG_SUB_OF(RAX[0:32], 0xC9F4)
af = ((RAX[0:32] ^ 0xC9F4) ^ (RAX[0:32] + -0xC9F4))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xC9F4)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_237,loc_key_238)
IRDst = CC_EQ(zf)?(loc_key_237,loc_key_238)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_507
[DEBUG] assignblk: RAX = zeroExt_64(0x2C34)
[DEBUG] assignblk: RCX = zeroExt_64(0x7815)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x52C4)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x52C4)
pf = parity((@32[RSP + 0x14] + -0x52C4) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x52C4)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x52C4)
af = ((@32[RSP + 0x14] ^ 0x52C4) ^ (@32[RSP + 0x14] + -0x52C4))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_506,loc_key_507)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_507, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_239
IRDst = loc_key_239
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xCB23)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xCB23)
pf = parity((RAX[0:32] + -0xCB23) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xCB23)
of = FLAG_SUB_OF(RAX[0:32], 0xCB23)
af = ((RAX[0:32] ^ 0xCB23) ^ (RAX[0:32] + -0xCB23))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xCB23)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_240,loc_key_241)
IRDst = CC_EQ(zf)?(loc_key_240,loc_key_241)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_509
[DEBUG] assignblk: RAX = zeroExt_64(0xF5AD)
[DEBUG] assignblk: RCX = zeroExt_64(0x6977)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x127E)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x127E)
pf = parity((@32[RSP + 0x14] + -0x127E) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x127E)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x127E)
af = ((@32[RSP + 0x14] ^ 0x127E) ^ (@32[RSP + 0x14] + -0x127E))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_508,loc_key_509)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_509, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_242
IRDst = loc_key_242
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xCD60)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xCD60)
pf = parity((RAX[0:32] + -0xCD60) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xCD60)
of = FLAG_SUB_OF(RAX[0:32], 0xCD60)
af = ((RAX[0:32] ^ 0xCD60) ^ (RAX[0:32] + -0xCD60))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xCD60)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_243,loc_key_244)
IRDst = CC_EQ(zf)?(loc_key_243,loc_key_244)
[DEBUG] assignblk: RIP = loc_key_245
IRDst = loc_key_245
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_511
[DEBUG] assignblk: RAX = zeroExt_64(0xB3D4)
[DEBUG] assignblk: RCX = zeroExt_64(0xEC06)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x14125)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x14125)
pf = parity((@32[RSP + 0x14] + -0x14125) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x14125)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x14125)
af = ((@32[RSP + 0x14] ^ 0x14125) ^ (@32[RSP + 0x14] + -0x14125))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_510,loc_key_511)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_511, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xCEEA)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xCEEA)
pf = parity((RAX[0:32] + -0xCEEA) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xCEEA)
of = FLAG_SUB_OF(RAX[0:32], 0xCEEA)
af = ((RAX[0:32] ^ 0xCEEA) ^ (RAX[0:32] + -0xCEEA))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xCEEA)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_246,loc_key_247)
IRDst = CC_EQ(zf)?(loc_key_246,loc_key_247)
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_246, 값: 0x17513
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_248
IRDst = loc_key_248
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xD018)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xD018)
pf = parity((RAX[0:32] + -0xD018) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xD018)
of = FLAG_SUB_OF(RAX[0:32], 0xD018)
af = ((RAX[0:32] ^ 0xD018) ^ (RAX[0:32] + -0xD018))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xD018)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_249,loc_key_250)
IRDst = CC_EQ(zf)?(loc_key_249,loc_key_250)
[DEBUG] assignblk: @32[RSP + 0x30] = 0x147A9
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_249, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_251
IRDst = loc_key_251
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xD1AC)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xD1AC)
pf = parity((RAX[0:32] + -0xD1AC) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xD1AC)
of = FLAG_SUB_OF(RAX[0:32], 0xD1AC)
af = ((RAX[0:32] ^ 0xD1AC) ^ (RAX[0:32] + -0xD1AC))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xD1AC)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_252,loc_key_253)
IRDst = CC_EQ(zf)?(loc_key_252,loc_key_253)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_513
[DEBUG] assignblk: RAX = zeroExt_64(0x6FE6)
[DEBUG] assignblk: RCX = zeroExt_64(0x72F4)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x146A)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x146A)
pf = parity((@32[RSP + 0x14] + -0x146A) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x146A)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x146A)
af = ((@32[RSP + 0x14] ^ 0x146A) ^ (@32[RSP + 0x14] + -0x146A))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_512,loc_key_513)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_513, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_254
IRDst = loc_key_254
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xD2EC)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xD2EC)
pf = parity((RAX[0:32] + -0xD2EC) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xD2EC)
of = FLAG_SUB_OF(RAX[0:32], 0xD2EC)
af = ((RAX[0:32] ^ 0xD2EC) ^ (RAX[0:32] + -0xD2EC))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xD2EC)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_255,loc_key_256)
IRDst = CC_EQ(zf)?(loc_key_255,loc_key_256)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_515
[DEBUG] assignblk: RAX = zeroExt_64(0x10038)
[DEBUG] assignblk: RCX = zeroExt_64(0x826C)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x7338)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x7338)
pf = parity((@32[RSP + 0x14] + -0x7338) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x7338)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x7338)
af = ((@32[RSP + 0x14] ^ 0x7338) ^ (@32[RSP + 0x14] + -0x7338))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_514,loc_key_515)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_515, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_257
IRDst = loc_key_257
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xD38E)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xD38E)
pf = parity((RAX[0:32] + -0xD38E) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xD38E)
of = FLAG_SUB_OF(RAX[0:32], 0xD38E)
af = ((RAX[0:32] ^ 0xD38E) ^ (RAX[0:32] + -0xD38E))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xD38E)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_258,loc_key_259)
IRDst = CC_EQ(zf)?(loc_key_258,loc_key_259)
[DEBUG] assignblk: RIP = loc_key_260
IRDst = loc_key_260
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_258, 값: 0x17513
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xD4F2)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xD4F2)
pf = parity((RAX[0:32] + -0xD4F2) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xD4F2)
of = FLAG_SUB_OF(RAX[0:32], 0xD4F2)
af = ((RAX[0:32] ^ 0xD4F2) ^ (RAX[0:32] + -0xD4F2))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xD4F2)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_261,loc_key_262)
IRDst = CC_EQ(zf)?(loc_key_261,loc_key_262)
[DEBUG] assignblk: RSI = zeroExt_64(@32[RSP + 0x20])
[DEBUG] assignblk: RDI = 0x1535 + 0x1AE5
[DEBUG] assignblk: RAX = {0x0 0 8, RAX[8:64] 8 64}
[DEBUG] assignblk: RAX = call_func_ret(loc_key_28, RSP, RCX, RDX, R8, R9)
RSP = call_func_stack(loc_key_28, RSP)
[DEBUG] assignblk: IRDst = loc_key_263
[DEBUG] assignblk: RIP = loc_key_264
IRDst = loc_key_264
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], RAX[0:32])
nf = FLAG_SIGN_SUB(RAX[0:32] ^ RAX[0:32], 0x0)
pf = parity((RAX[0:32] ^ RAX[0:32]) & 0xFF)
of = 0x0
cf = 0x0
RAX = zeroExt_64(RAX[0:32] ^ RAX[0:32])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RSP, -0x38)
nf = FLAG_SIGN_SUB(RSP, -0x38)
pf = parity((RSP + 0x38) & 0xFF)
cf = FLAG_ADD_CF(RSP, 0x38)
of = FLAG_ADD_OF(RSP, 0x38)
af = ((RSP ^ 0x38) ^ (RSP + 0x38))[4:5]
RSP = RSP + 0x38
[DEBUG] assignblk: RSP = RSP[0:64] + 0x8
RIP = @64[RSP[0:64]]
IRDst = @64[RSP[0:64]]
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xD612)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xD612)
pf = parity((RAX[0:32] + -0xD612) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xD612)
of = FLAG_SUB_OF(RAX[0:32], 0xD612)
af = ((RAX[0:32] ^ 0xD612) ^ (RAX[0:32] + -0xD612))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xD612)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_265,loc_key_266)
IRDst = CC_EQ(zf)?(loc_key_265,loc_key_266)
[DEBUG] assignblk: RIP = loc_key_267
IRDst = loc_key_267
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_517
[DEBUG] assignblk: RAX = zeroExt_64(0xD725)
[DEBUG] assignblk: RCX = zeroExt_64(0x335F)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x756B)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x756B)
pf = parity((@32[RSP + 0x14] + -0x756B) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x756B)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x756B)
af = ((@32[RSP + 0x14] ^ 0x756B) ^ (@32[RSP + 0x14] + -0x756B))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_516,loc_key_517)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_517, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xD64C)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xD64C)
pf = parity((RAX[0:32] + -0xD64C) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xD64C)
of = FLAG_SUB_OF(RAX[0:32], 0xD64C)
af = ((RAX[0:32] ^ 0xD64C) ^ (RAX[0:32] + -0xD64C))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xD64C)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_268,loc_key_269)
IRDst = CC_EQ(zf)?(loc_key_268,loc_key_269)
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_268, 값: 0x17513
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_270
IRDst = loc_key_270
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xD67C)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xD67C)
pf = parity((RAX[0:32] + -0xD67C) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xD67C)
of = FLAG_SUB_OF(RAX[0:32], 0xD67C)
af = ((RAX[0:32] ^ 0xD67C) ^ (RAX[0:32] + -0xD67C))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xD67C)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_271,loc_key_272)
IRDst = CC_EQ(zf)?(loc_key_271,loc_key_272)
[DEBUG] assignblk: RIP = loc_key_273
IRDst = loc_key_273
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_271, 값: 0x17513
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xD725)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xD725)
pf = parity((RAX[0:32] + -0xD725) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xD725)
of = FLAG_SUB_OF(RAX[0:32], 0xD725)
af = ((RAX[0:32] ^ 0xD725) ^ (RAX[0:32] + -0xD725))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xD725)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_274,loc_key_275)
IRDst = CC_EQ(zf)?(loc_key_274,loc_key_275)
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_274, 값: 0x17513
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_276
IRDst = loc_key_276
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xD807)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xD807)
pf = parity((RAX[0:32] + -0xD807) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xD807)
of = FLAG_SUB_OF(RAX[0:32], 0xD807)
af = ((RAX[0:32] ^ 0xD807) ^ (RAX[0:32] + -0xD807))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xD807)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_277,loc_key_278)
IRDst = CC_EQ(zf)?(loc_key_277,loc_key_278)
[DEBUG] assignblk: RIP = loc_key_279
IRDst = loc_key_279
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_519
[DEBUG] assignblk: RAX = zeroExt_64(0x161E6)
[DEBUG] assignblk: RCX = zeroExt_64(0x2F69)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x13936)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x13936)
pf = parity((@32[RSP + 0x14] + -0x13936) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x13936)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x13936)
af = ((@32[RSP + 0x14] ^ 0x13936) ^ (@32[RSP + 0x14] + -0x13936))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_518,loc_key_519)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_519, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xE360)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xE360)
pf = parity((RAX[0:32] + -0xE360) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xE360)
of = FLAG_SUB_OF(RAX[0:32], 0xE360)
af = ((RAX[0:32] ^ 0xE360) ^ (RAX[0:32] + -0xE360))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xE360)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_280,loc_key_281)
IRDst = CC_EQ(zf)?(loc_key_280,loc_key_281)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_521
[DEBUG] assignblk: RAX = zeroExt_64(0x128D5)
[DEBUG] assignblk: RCX = zeroExt_64(0x9481)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x10458)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x10458)
pf = parity((@32[RSP + 0x14] + -0x10458) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x10458)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x10458)
af = ((@32[RSP + 0x14] ^ 0x10458) ^ (@32[RSP + 0x14] + -0x10458))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_520,loc_key_521)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_521, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_282
IRDst = loc_key_282
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xE372)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xE372)
pf = parity((RAX[0:32] + -0xE372) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xE372)
of = FLAG_SUB_OF(RAX[0:32], 0xE372)
af = ((RAX[0:32] ^ 0xE372) ^ (RAX[0:32] + -0xE372))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xE372)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_283,loc_key_284)
IRDst = CC_EQ(zf)?(loc_key_283,loc_key_284)
[DEBUG] assignblk: @32[RSP + 0x24] = 0x2
[DEBUG] assignblk: @32[RSP + 0x30] = 0x756B
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_283, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_285
IRDst = loc_key_285
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xE541)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xE541)
pf = parity((RAX[0:32] + -0xE541) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xE541)
of = FLAG_SUB_OF(RAX[0:32], 0xE541)
af = ((RAX[0:32] ^ 0xE541) ^ (RAX[0:32] + -0xE541))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xE541)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_286,loc_key_287)
IRDst = CC_EQ(zf)?(loc_key_286,loc_key_287)
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_286, 값: 0x17513
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_288
IRDst = loc_key_288
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xEC06)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xEC06)
pf = parity((RAX[0:32] + -0xEC06) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xEC06)
of = FLAG_SUB_OF(RAX[0:32], 0xEC06)
af = ((RAX[0:32] ^ 0xEC06) ^ (RAX[0:32] + -0xEC06))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xEC06)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_289,loc_key_290)
IRDst = CC_EQ(zf)?(loc_key_289,loc_key_290)
[DEBUG] assignblk: RIP = loc_key_291
IRDst = loc_key_291
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_523
[DEBUG] assignblk: RAX = zeroExt_64(0xEFF)
[DEBUG] assignblk: RCX = zeroExt_64(0x698D)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x140AF)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x140AF)
pf = parity((@32[RSP + 0x14] + -0x140AF) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x140AF)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x140AF)
af = ((@32[RSP + 0x14] ^ 0x140AF) ^ (@32[RSP + 0x14] + -0x140AF))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_522,loc_key_523)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_523, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xEF9C)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xEF9C)
pf = parity((RAX[0:32] + -0xEF9C) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xEF9C)
of = FLAG_SUB_OF(RAX[0:32], 0xEF9C)
af = ((RAX[0:32] ^ 0xEF9C) ^ (RAX[0:32] + -0xEF9C))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xEF9C)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_292,loc_key_293)
IRDst = CC_EQ(zf)?(loc_key_292,loc_key_293)
[DEBUG] assignblk: RIP = loc_key_294
IRDst = loc_key_294
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_292, 값: 0x17513
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xF2AF)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xF2AF)
pf = parity((RAX[0:32] + -0xF2AF) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xF2AF)
of = FLAG_SUB_OF(RAX[0:32], 0xF2AF)
af = ((RAX[0:32] ^ 0xF2AF) ^ (RAX[0:32] + -0xF2AF))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xF2AF)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_295,loc_key_296)
IRDst = CC_EQ(zf)?(loc_key_295,loc_key_296)
[DEBUG] assignblk: RIP = loc_key_297
IRDst = loc_key_297
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_295, 값: 0x17513
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xF3A1)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xF3A1)
pf = parity((RAX[0:32] + -0xF3A1) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xF3A1)
of = FLAG_SUB_OF(RAX[0:32], 0xF3A1)
af = ((RAX[0:32] ^ 0xF3A1) ^ (RAX[0:32] + -0xF3A1))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xF3A1)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_298,loc_key_299)
IRDst = CC_EQ(zf)?(loc_key_298,loc_key_299)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_525
[DEBUG] assignblk: RAX = zeroExt_64(0xE541)
[DEBUG] assignblk: RCX = zeroExt_64(0x7942)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x14125)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x14125)
pf = parity((@32[RSP + 0x14] + -0x14125) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x14125)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x14125)
af = ((@32[RSP + 0x14] ^ 0x14125) ^ (@32[RSP + 0x14] + -0x14125))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_524,loc_key_525)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_525, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_300
IRDst = loc_key_300
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xF4DD)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xF4DD)
pf = parity((RAX[0:32] + -0xF4DD) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xF4DD)
of = FLAG_SUB_OF(RAX[0:32], 0xF4DD)
af = ((RAX[0:32] ^ 0xF4DD) ^ (RAX[0:32] + -0xF4DD))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xF4DD)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_301,loc_key_302)
IRDst = CC_EQ(zf)?(loc_key_301,loc_key_302)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_527
[DEBUG] assignblk: RAX = zeroExt_64(0x6CB0)
[DEBUG] assignblk: RCX = zeroExt_64(0x2472)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x9580)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x9580)
pf = parity((@32[RSP + 0x14] + -0x9580) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x9580)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x9580)
af = ((@32[RSP + 0x14] ^ 0x9580) ^ (@32[RSP + 0x14] + -0x9580))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_526,loc_key_527)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_527, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_303
IRDst = loc_key_303
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xF5AD)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xF5AD)
pf = parity((RAX[0:32] + -0xF5AD) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xF5AD)
of = FLAG_SUB_OF(RAX[0:32], 0xF5AD)
af = ((RAX[0:32] ^ 0xF5AD) ^ (RAX[0:32] + -0xF5AD))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xF5AD)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_304,loc_key_305)
IRDst = CC_EQ(zf)?(loc_key_304,loc_key_305)
[DEBUG] assignblk: RIP = loc_key_306
IRDst = loc_key_306
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_304, 값: 0x17513
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0xF72C)
nf = FLAG_SIGN_SUB(RAX[0:32], 0xF72C)
pf = parity((RAX[0:32] + -0xF72C) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0xF72C)
of = FLAG_SUB_OF(RAX[0:32], 0xF72C)
af = ((RAX[0:32] ^ 0xF72C) ^ (RAX[0:32] + -0xF72C))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0xF72C)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_307,loc_key_308)
IRDst = CC_EQ(zf)?(loc_key_307,loc_key_308)
[DEBUG] assignblk: RIP = loc_key_309
IRDst = loc_key_309
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_307, 값: 0x17513
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x10038)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x10038)
pf = parity((RAX[0:32] + -0x10038) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x10038)
of = FLAG_SUB_OF(RAX[0:32], 0x10038)
af = ((RAX[0:32] ^ 0x10038) ^ (RAX[0:32] + -0x10038))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x10038)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_310,loc_key_311)
IRDst = CC_EQ(zf)?(loc_key_310,loc_key_311)
[DEBUG] assignblk: RIP = loc_key_312
IRDst = loc_key_312
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_529
[DEBUG] assignblk: RAX = zeroExt_64(0x17520)
[DEBUG] assignblk: RCX = zeroExt_64(0x147AC)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x7338)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x7338)
pf = parity((@32[RSP + 0x14] + -0x7338) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x7338)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x7338)
af = ((@32[RSP + 0x14] ^ 0x7338) ^ (@32[RSP + 0x14] + -0x7338))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_528,loc_key_529)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_529, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x10209)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x10209)
pf = parity((RAX[0:32] + -0x10209) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x10209)
of = FLAG_SUB_OF(RAX[0:32], 0x10209)
af = ((RAX[0:32] ^ 0x10209) ^ (RAX[0:32] + -0x10209))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x10209)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_313,loc_key_314)
IRDst = CC_EQ(zf)?(loc_key_313,loc_key_314)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_531
[DEBUG] assignblk: RAX = zeroExt_64(0x140AF)
[DEBUG] assignblk: RCX = zeroExt_64(0x52C4)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x18], 0x0)
nf = FLAG_SIGN_SUB(@32[RSP + 0x18], 0x0)
pf = parity((@32[RSP + 0x18] + -0x0) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x18], 0x0)
of = FLAG_SUB_OF(@32[RSP + 0x18], 0x0)
af = ((@32[RSP + 0x18] ^ 0x0) ^ (@32[RSP + 0x18] + -0x0))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_530,loc_key_531)
[DEBUG] assignblk: @32[RSP + 0x30] = RAX[0:32]
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_531, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_315
IRDst = loc_key_315
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x10285)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x10285)
pf = parity((RAX[0:32] + -0x10285) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x10285)
of = FLAG_SUB_OF(RAX[0:32], 0x10285)
af = ((RAX[0:32] ^ 0x10285) ^ (RAX[0:32] + -0x10285))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x10285)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_316,loc_key_317)
IRDst = CC_EQ(zf)?(loc_key_316,loc_key_317)
[DEBUG] assignblk: RIP = loc_key_318
IRDst = loc_key_318
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_533
[DEBUG] assignblk: RAX = zeroExt_64(0x1B19)
[DEBUG] assignblk: RCX = zeroExt_64(0xD2EC)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x756B)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x756B)
pf = parity((@32[RSP + 0x14] + -0x756B) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x756B)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x756B)
af = ((@32[RSP + 0x14] ^ 0x756B) ^ (@32[RSP + 0x14] + -0x756B))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_532,loc_key_533)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_533, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x1056A)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x1056A)
pf = parity((RAX[0:32] + -0x1056A) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x1056A)
of = FLAG_SUB_OF(RAX[0:32], 0x1056A)
af = ((RAX[0:32] ^ 0x1056A) ^ (RAX[0:32] + -0x1056A))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x1056A)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_319,loc_key_320)
IRDst = CC_EQ(zf)?(loc_key_319,loc_key_320)
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_319, 값: 0x17513
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_321
IRDst = loc_key_321
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x10E8D)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x10E8D)
pf = parity((RAX[0:32] + -0x10E8D) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x10E8D)
of = FLAG_SUB_OF(RAX[0:32], 0x10E8D)
af = ((RAX[0:32] ^ 0x10E8D) ^ (RAX[0:32] + -0x10E8D))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x10E8D)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_322,loc_key_323)
IRDst = CC_EQ(zf)?(loc_key_322,loc_key_323)
[DEBUG] assignblk: RIP = loc_key_324
IRDst = loc_key_324
[DEBUG] assignblk: @32[RSP + 0x24] = 0xFFFFFFFF
[DEBUG] assignblk: @32[RSP + 0x30] = 0x756B
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_322, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x11AAE)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x11AAE)
pf = parity((RAX[0:32] + -0x11AAE) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x11AAE)
of = FLAG_SUB_OF(RAX[0:32], 0x11AAE)
af = ((RAX[0:32] ^ 0x11AAE) ^ (RAX[0:32] + -0x11AAE))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x11AAE)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_325,loc_key_326)
IRDst = CC_EQ(zf)?(loc_key_325,loc_key_326)
[DEBUG] assignblk: RIP = loc_key_327
IRDst = loc_key_327
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_535
[DEBUG] assignblk: RAX = zeroExt_64(0x122A2)
[DEBUG] assignblk: RCX = zeroExt_64(0x362)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x14FA)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x14FA)
pf = parity((@32[RSP + 0x14] + -0x14FA) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x14FA)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x14FA)
af = ((@32[RSP + 0x14] ^ 0x14FA) ^ (@32[RSP + 0x14] + -0x14FA))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_534,loc_key_535)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_535, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x11DDB)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x11DDB)
pf = parity((RAX[0:32] + -0x11DDB) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x11DDB)
of = FLAG_SUB_OF(RAX[0:32], 0x11DDB)
af = ((RAX[0:32] ^ 0x11DDB) ^ (RAX[0:32] + -0x11DDB))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x11DDB)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_328,loc_key_329)
IRDst = CC_EQ(zf)?(loc_key_328,loc_key_329)
[DEBUG] assignblk: RIP = loc_key_330
IRDst = loc_key_330
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_537
[DEBUG] assignblk: RAX = zeroExt_64(0xD64C)
[DEBUG] assignblk: RCX = zeroExt_64(0x6155)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x1ED3)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x1ED3)
pf = parity((@32[RSP + 0x14] + -0x1ED3) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x1ED3)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x1ED3)
af = ((@32[RSP + 0x14] ^ 0x1ED3) ^ (@32[RSP + 0x14] + -0x1ED3))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_536,loc_key_537)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_537, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x1216D)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x1216D)
pf = parity((RAX[0:32] + -0x1216D) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x1216D)
of = FLAG_SUB_OF(RAX[0:32], 0x1216D)
af = ((RAX[0:32] ^ 0x1216D) ^ (RAX[0:32] + -0x1216D))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x1216D)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_331,loc_key_332)
IRDst = CC_EQ(zf)?(loc_key_331,loc_key_332)
[DEBUG] assignblk: RIP = loc_key_333
IRDst = loc_key_333
[DEBUG] assignblk: @32[RSP + 0x30] = 0x1ED3
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_331, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x122A2)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x122A2)
pf = parity((RAX[0:32] + -0x122A2) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x122A2)
of = FLAG_SUB_OF(RAX[0:32], 0x122A2)
af = ((RAX[0:32] ^ 0x122A2) ^ (RAX[0:32] + -0x122A2))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x122A2)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_334,loc_key_335)
IRDst = CC_EQ(zf)?(loc_key_334,loc_key_335)
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_334, 값: 0x17513
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_336
IRDst = loc_key_336
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x123F1)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x123F1)
pf = parity((RAX[0:32] + -0x123F1) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x123F1)
of = FLAG_SUB_OF(RAX[0:32], 0x123F1)
af = ((RAX[0:32] ^ 0x123F1) ^ (RAX[0:32] + -0x123F1))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x123F1)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_337,loc_key_338)
IRDst = CC_EQ(zf)?(loc_key_337,loc_key_338)
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_337, 값: 0x17513
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_339
IRDst = loc_key_339
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x128D5)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x128D5)
pf = parity((RAX[0:32] + -0x128D5) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x128D5)
of = FLAG_SUB_OF(RAX[0:32], 0x128D5)
af = ((RAX[0:32] ^ 0x128D5) ^ (RAX[0:32] + -0x128D5))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x128D5)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_340,loc_key_341)
IRDst = CC_EQ(zf)?(loc_key_340,loc_key_341)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_539
[DEBUG] assignblk: RAX = zeroExt_64(0x2148)
[DEBUG] assignblk: RCX = zeroExt_64(0x2702)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x11D36)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x11D36)
pf = parity((@32[RSP + 0x14] + -0x11D36) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x11D36)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x11D36)
af = ((@32[RSP + 0x14] ^ 0x11D36) ^ (@32[RSP + 0x14] + -0x11D36))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_538,loc_key_539)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_539, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_342
IRDst = loc_key_342
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x12914)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x12914)
pf = parity((RAX[0:32] + -0x12914) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x12914)
of = FLAG_SUB_OF(RAX[0:32], 0x12914)
af = ((RAX[0:32] ^ 0x12914) ^ (RAX[0:32] + -0x12914))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x12914)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_343,loc_key_344)
IRDst = CC_EQ(zf)?(loc_key_343,loc_key_344)
[DEBUG] assignblk: RIP = loc_key_345
IRDst = loc_key_345
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_541
[DEBUG] assignblk: RAX = zeroExt_64(0x6D96)
[DEBUG] assignblk: RCX = zeroExt_64(0x741A)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x16B9D)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x16B9D)
pf = parity((@32[RSP + 0x14] + -0x16B9D) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x16B9D)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x16B9D)
af = ((@32[RSP + 0x14] ^ 0x16B9D) ^ (@32[RSP + 0x14] + -0x16B9D))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_540,loc_key_541)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_541, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x130D1)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x130D1)
pf = parity((RAX[0:32] + -0x130D1) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x130D1)
of = FLAG_SUB_OF(RAX[0:32], 0x130D1)
af = ((RAX[0:32] ^ 0x130D1) ^ (RAX[0:32] + -0x130D1))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x130D1)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_346,loc_key_347)
IRDst = CC_EQ(zf)?(loc_key_346,loc_key_347)
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_346, 값: 0x17513
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_348
IRDst = loc_key_348
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x1390B)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x1390B)
pf = parity((RAX[0:32] + -0x1390B) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x1390B)
of = FLAG_SUB_OF(RAX[0:32], 0x1390B)
af = ((RAX[0:32] ^ 0x1390B) ^ (RAX[0:32] + -0x1390B))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x1390B)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_349,loc_key_350)
IRDst = CC_EQ(zf)?(loc_key_349,loc_key_350)
[DEBUG] assignblk: RIP = loc_key_351
IRDst = loc_key_351
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_543
[DEBUG] assignblk: RAX = zeroExt_64(0x4577)
[DEBUG] assignblk: RCX = zeroExt_64(0x12914)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x1767E)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x1767E)
pf = parity((@32[RSP + 0x14] + -0x1767E) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x1767E)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x1767E)
af = ((@32[RSP + 0x14] ^ 0x1767E) ^ (@32[RSP + 0x14] + -0x1767E))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_542,loc_key_543)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_543, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x13E9E)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x13E9E)
pf = parity((RAX[0:32] + -0x13E9E) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x13E9E)
of = FLAG_SUB_OF(RAX[0:32], 0x13E9E)
af = ((RAX[0:32] ^ 0x13E9E) ^ (RAX[0:32] + -0x13E9E))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x13E9E)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_352,loc_key_353)
IRDst = CC_EQ(zf)?(loc_key_352,loc_key_353)
[DEBUG] assignblk: RIP = loc_key_354
IRDst = loc_key_354
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_352, 값: 0x17513
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x14272)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x14272)
pf = parity((RAX[0:32] + -0x14272) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x14272)
of = FLAG_SUB_OF(RAX[0:32], 0x14272)
af = ((RAX[0:32] ^ 0x14272) ^ (RAX[0:32] + -0x14272))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x14272)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_355,loc_key_356)
IRDst = CC_EQ(zf)?(loc_key_355,loc_key_356)
[DEBUG] assignblk: @32[RSP + 0x24] = 0xFFFFFFFF
[DEBUG] assignblk: @32[RSP + 0x30] = 0x14125
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_355, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_357
IRDst = loc_key_357
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x142D0)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x142D0)
pf = parity((RAX[0:32] + -0x142D0) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x142D0)
of = FLAG_SUB_OF(RAX[0:32], 0x142D0)
af = ((RAX[0:32] ^ 0x142D0) ^ (RAX[0:32] + -0x142D0))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x142D0)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_358,loc_key_359)
IRDst = CC_EQ(zf)?(loc_key_358,loc_key_359)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_545
[DEBUG] assignblk: RAX = zeroExt_64(0xD39B)
[DEBUG] assignblk: RCX = zeroExt_64(0x127E)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x24], 0xFFFFFFFF)
nf = FLAG_SIGN_SUB(@32[RSP + 0x24], 0xFFFFFFFF)
pf = parity((@32[RSP + 0x24] + -0xFFFFFFFF) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x24], 0xFFFFFFFF)
of = FLAG_SUB_OF(@32[RSP + 0x24], 0xFFFFFFFF)
af = ((@32[RSP + 0x24] ^ 0xFFFFFFFF) ^ (@32[RSP + 0x24] + -0xFFFFFFFF))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_545,loc_key_544)
[DEBUG] assignblk: @32[RSP + 0x30] = RAX[0:32]
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_545, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_360
IRDst = loc_key_360
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x142F5)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x142F5)
pf = parity((RAX[0:32] + -0x142F5) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x142F5)
of = FLAG_SUB_OF(RAX[0:32], 0x142F5)
af = ((RAX[0:32] ^ 0x142F5) ^ (RAX[0:32] + -0x142F5))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x142F5)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_361,loc_key_362)
IRDst = CC_EQ(zf)?(loc_key_361,loc_key_362)
[DEBUG] assignblk: RIP = loc_key_363
IRDst = loc_key_363
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_547
[DEBUG] assignblk: RAX = zeroExt_64(0x17F45)
[DEBUG] assignblk: RCX = zeroExt_64(0x10E8D)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x10458)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x10458)
pf = parity((@32[RSP + 0x14] + -0x10458) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x10458)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x10458)
af = ((@32[RSP + 0x14] ^ 0x10458) ^ (@32[RSP + 0x14] + -0x10458))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_546,loc_key_547)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_547, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x14741)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x14741)
pf = parity((RAX[0:32] + -0x14741) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x14741)
of = FLAG_SUB_OF(RAX[0:32], 0x14741)
af = ((RAX[0:32] ^ 0x14741) ^ (RAX[0:32] + -0x14741))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x14741)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_364,loc_key_365)
IRDst = CC_EQ(zf)?(loc_key_364,loc_key_365)
[DEBUG] assignblk: @32[RSP + 0x30] = 0x157CA
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_364, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_366
IRDst = loc_key_366
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x147AC)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x147AC)
pf = parity((RAX[0:32] + -0x147AC) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x147AC)
of = FLAG_SUB_OF(RAX[0:32], 0x147AC)
af = ((RAX[0:32] ^ 0x147AC) ^ (RAX[0:32] + -0x147AC))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x147AC)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_367,loc_key_368)
IRDst = CC_EQ(zf)?(loc_key_367,loc_key_368)
[DEBUG] assignblk: @32[RSP + 0x24] = 0x1
[DEBUG] assignblk: @32[RSP + 0x30] = 0x9580
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_367, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_369
IRDst = loc_key_369
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x1480D)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x1480D)
pf = parity((RAX[0:32] + -0x1480D) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x1480D)
of = FLAG_SUB_OF(RAX[0:32], 0x1480D)
af = ((RAX[0:32] ^ 0x1480D) ^ (RAX[0:32] + -0x1480D))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x1480D)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_370,loc_key_371)
IRDst = CC_EQ(zf)?(loc_key_370,loc_key_371)
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_370, 값: 0x17513
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_372
IRDst = loc_key_372
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x14DA2)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x14DA2)
pf = parity((RAX[0:32] + -0x14DA2) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x14DA2)
of = FLAG_SUB_OF(RAX[0:32], 0x14DA2)
af = ((RAX[0:32] ^ 0x14DA2) ^ (RAX[0:32] + -0x14DA2))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x14DA2)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_373,loc_key_374)
IRDst = CC_EQ(zf)?(loc_key_373,loc_key_374)
[DEBUG] assignblk: RIP = loc_key_375
IRDst = loc_key_375
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_549
[DEBUG] assignblk: RAX = zeroExt_64(0x156F2)
[DEBUG] assignblk: RCX = zeroExt_64(0x142D0)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x1535C)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x1535C)
pf = parity((@32[RSP + 0x14] + -0x1535C) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x1535C)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x1535C)
af = ((@32[RSP + 0x14] ^ 0x1535C) ^ (@32[RSP + 0x14] + -0x1535C))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_548,loc_key_549)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_549, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x15209)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x15209)
pf = parity((RAX[0:32] + -0x15209) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x15209)
of = FLAG_SUB_OF(RAX[0:32], 0x15209)
af = ((RAX[0:32] ^ 0x15209) ^ (RAX[0:32] + -0x15209))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x15209)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_376,loc_key_377)
IRDst = CC_EQ(zf)?(loc_key_376,loc_key_377)
[DEBUG] assignblk: RIP = loc_key_378
IRDst = loc_key_378
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_551
[DEBUG] assignblk: RAX = zeroExt_64(0x5A34)
[DEBUG] assignblk: RCX = zeroExt_64(0x14741)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x59CA)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x59CA)
pf = parity((@32[RSP + 0x14] + -0x59CA) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x59CA)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x59CA)
af = ((@32[RSP + 0x14] ^ 0x59CA) ^ (@32[RSP + 0x14] + -0x59CA))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_550,loc_key_551)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_551, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x154BA)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x154BA)
pf = parity((RAX[0:32] + -0x154BA) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x154BA)
of = FLAG_SUB_OF(RAX[0:32], 0x154BA)
af = ((RAX[0:32] ^ 0x154BA) ^ (RAX[0:32] + -0x154BA))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x154BA)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_379,loc_key_380)
IRDst = CC_EQ(zf)?(loc_key_379,loc_key_380)
[DEBUG] assignblk: RIP = loc_key_381
IRDst = loc_key_381
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_379, 값: 0x17513
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x156F2)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x156F2)
pf = parity((RAX[0:32] + -0x156F2) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x156F2)
of = FLAG_SUB_OF(RAX[0:32], 0x156F2)
af = ((RAX[0:32] ^ 0x156F2) ^ (RAX[0:32] + -0x156F2))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x156F2)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_382,loc_key_383)
IRDst = CC_EQ(zf)?(loc_key_382,loc_key_383)
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_382, 값: 0x17513
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_384
IRDst = loc_key_384
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x159AF)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x159AF)
pf = parity((RAX[0:32] + -0x159AF) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x159AF)
of = FLAG_SUB_OF(RAX[0:32], 0x159AF)
af = ((RAX[0:32] ^ 0x159AF) ^ (RAX[0:32] + -0x159AF))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x159AF)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_385,loc_key_386)
IRDst = CC_EQ(zf)?(loc_key_385,loc_key_386)
[DEBUG] assignblk: RIP = loc_key_387
IRDst = loc_key_387
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_553
[DEBUG] assignblk: RAX = zeroExt_64(0x5CF0)
[DEBUG] assignblk: RCX = zeroExt_64(0xE360)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x13FE8)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x13FE8)
pf = parity((@32[RSP + 0x14] + -0x13FE8) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x13FE8)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x13FE8)
af = ((@32[RSP + 0x14] ^ 0x13FE8) ^ (@32[RSP + 0x14] + -0x13FE8))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_552,loc_key_553)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_553, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x161E6)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x161E6)
pf = parity((RAX[0:32] + -0x161E6) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x161E6)
of = FLAG_SUB_OF(RAX[0:32], 0x161E6)
af = ((RAX[0:32] ^ 0x161E6) ^ (RAX[0:32] + -0x161E6))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x161E6)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_388,loc_key_389)
IRDst = CC_EQ(zf)?(loc_key_388,loc_key_389)
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_388, 값: 0x17513
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_390
IRDst = loc_key_390
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x1697A)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x1697A)
pf = parity((RAX[0:32] + -0x1697A) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x1697A)
of = FLAG_SUB_OF(RAX[0:32], 0x1697A)
af = ((RAX[0:32] ^ 0x1697A) ^ (RAX[0:32] + -0x1697A))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x1697A)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_391,loc_key_392)
IRDst = CC_EQ(zf)?(loc_key_391,loc_key_392)
[DEBUG] assignblk: RIP = loc_key_393
IRDst = loc_key_393
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_555
[DEBUG] assignblk: RAX = zeroExt_64(0xAAE1)
[DEBUG] assignblk: RCX = zeroExt_64(0x6BC1)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x101A9)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x101A9)
pf = parity((@32[RSP + 0x14] + -0x101A9) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x101A9)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x101A9)
af = ((@32[RSP + 0x14] ^ 0x101A9) ^ (@32[RSP + 0x14] + -0x101A9))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_554,loc_key_555)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_555, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x16BB2)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x16BB2)
pf = parity((RAX[0:32] + -0x16BB2) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x16BB2)
of = FLAG_SUB_OF(RAX[0:32], 0x16BB2)
af = ((RAX[0:32] ^ 0x16BB2) ^ (RAX[0:32] + -0x16BB2))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x16BB2)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_394,loc_key_395)
IRDst = CC_EQ(zf)?(loc_key_394,loc_key_395)
[DEBUG] assignblk: RIP = loc_key_396
IRDst = loc_key_396
[DEBUG] assignblk: @32[RSP + 0x24] = 0xFFFFFFFF
[DEBUG] assignblk: @32[RSP + 0x30] = 0x14125
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_394, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x17040)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x17040)
pf = parity((RAX[0:32] + -0x17040) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x17040)
of = FLAG_SUB_OF(RAX[0:32], 0x17040)
af = ((RAX[0:32] ^ 0x17040) ^ (RAX[0:32] + -0x17040))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x17040)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_397,loc_key_398)
IRDst = CC_EQ(zf)?(loc_key_397,loc_key_398)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_557
[DEBUG] assignblk: RAX = zeroExt_64(0x13E9E)
[DEBUG] assignblk: RCX = zeroExt_64(0x17A0D)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x11D36)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x11D36)
pf = parity((@32[RSP + 0x14] + -0x11D36) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x11D36)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x11D36)
af = ((@32[RSP + 0x14] ^ 0x11D36) ^ (@32[RSP + 0x14] + -0x11D36))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_556,loc_key_557)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_557, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_399
IRDst = loc_key_399
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x17513)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x17513)
pf = parity((RAX[0:32] + -0x17513) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x17513)
of = FLAG_SUB_OF(RAX[0:32], 0x17513)
af = ((RAX[0:32] ^ 0x17513) ^ (RAX[0:32] + -0x17513))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x17513)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_400,loc_key_401)
IRDst = CC_EQ(zf)?(loc_key_400,loc_key_401)
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_400, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_402
IRDst = loc_key_402
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x17520)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x17520)
pf = parity((RAX[0:32] + -0x17520) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x17520)
of = FLAG_SUB_OF(RAX[0:32], 0x17520)
af = ((RAX[0:32] ^ 0x17520) ^ (RAX[0:32] + -0x17520))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x17520)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_403,loc_key_404)
IRDst = CC_EQ(zf)?(loc_key_403,loc_key_404)
[DEBUG] assignblk: RIP = loc_key_405
IRDst = loc_key_405
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_403, 값: 0x17513
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x17A0D)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x17A0D)
pf = parity((RAX[0:32] + -0x17A0D) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x17A0D)
of = FLAG_SUB_OF(RAX[0:32], 0x17A0D)
af = ((RAX[0:32] ^ 0x17A0D) ^ (RAX[0:32] + -0x17A0D))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x17A0D)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_406,loc_key_407)
IRDst = CC_EQ(zf)?(loc_key_406,loc_key_407)
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_559
[DEBUG] assignblk: RAX = zeroExt_64(0x13936)
[DEBUG] assignblk: RCX = zeroExt_64(0x7338)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x28], 0xA)
nf = FLAG_SIGN_SUB(@32[RSP + 0x28], 0xA)
pf = parity((@32[RSP + 0x28] + -0xA) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x28], 0xA)
of = FLAG_SUB_OF(@32[RSP + 0x28], 0xA)
af = ((@32[RSP + 0x28] ^ 0xA) ^ (@32[RSP + 0x28] + -0xA))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<=(nf, of, zf)?(loc_key_558,loc_key_559)
[DEBUG] assignblk: @32[RSP + 0x30] = RAX[0:32]
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_559, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RIP = loc_key_408
IRDst = loc_key_408
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x17C26)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x17C26)
pf = parity((RAX[0:32] + -0x17C26) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x17C26)
of = FLAG_SUB_OF(RAX[0:32], 0x17C26)
af = ((RAX[0:32] ^ 0x17C26) ^ (RAX[0:32] + -0x17C26))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x17C26)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_409,loc_key_410)
IRDst = CC_EQ(zf)?(loc_key_409,loc_key_410)
[DEBUG] assignblk: RIP = loc_key_411
IRDst = loc_key_411
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_561
[DEBUG] assignblk: RAX = zeroExt_64(0x70C6)
[DEBUG] assignblk: RCX = zeroExt_64(0xD1AC)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0x1ED3)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0x1ED3)
pf = parity((@32[RSP + 0x14] + -0x1ED3) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0x1ED3)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0x1ED3)
af = ((@32[RSP + 0x14] ^ 0x1ED3) ^ (@32[RSP + 0x14] + -0x1ED3))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S<(nf, of)?(loc_key_560,loc_key_561)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_561, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x17C98)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x17C98)
pf = parity((RAX[0:32] + -0x17C98) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x17C98)
of = FLAG_SUB_OF(RAX[0:32], 0x17C98)
af = ((RAX[0:32] ^ 0x17C98) ^ (RAX[0:32] + -0x17C98))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x17C98)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_412,loc_key_413)
IRDst = CC_EQ(zf)?(loc_key_412,loc_key_413)
[DEBUG] assignblk: RIP = loc_key_414
IRDst = loc_key_414
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_563
[DEBUG] assignblk: RAX = zeroExt_64(0xD67C)
[DEBUG] assignblk: RCX = zeroExt_64(0x1216D)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x14], 0xA343)
nf = FLAG_SIGN_SUB(@32[RSP + 0x14], 0xA343)
pf = parity((@32[RSP + 0x14] + -0xA343) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x14], 0xA343)
of = FLAG_SUB_OF(@32[RSP + 0x14], 0xA343)
af = ((@32[RSP + 0x14] ^ 0xA343) ^ (@32[RSP + 0x14] + -0xA343))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_EQ(zf)?(loc_key_562,loc_key_563)
[DEBUG] assignblk: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = RAX[0:32]
[DEBUG] 패치 대상 추가: 블록 loc_key_563, 값: RAX[0:32]
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x17F45)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x17F45)
pf = parity((RAX[0:32] + -0x17F45) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x17F45)
of = FLAG_SUB_OF(RAX[0:32], 0x17F45)
af = ((RAX[0:32] ^ 0x17F45) ^ (RAX[0:32] + -0x17F45))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x17F45)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_415,loc_key_416)
IRDst = CC_EQ(zf)?(loc_key_415,loc_key_416)
[DEBUG] assignblk: RIP = loc_key_417
IRDst = loc_key_417
[DEBUG] assignblk: @32[RSP + 0x34] = 0x17513
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x17513
[DEBUG] 패치 대상 추가: 블록 loc_key_415, 값: 0x17513
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(@32[RSP + 0xC])
[DEBUG] assignblk: zf = FLAG_EQ_CMP(RAX[0:32], 0x18426)
nf = FLAG_SIGN_SUB(RAX[0:32], 0x18426)
pf = parity((RAX[0:32] + -0x18426) & 0xFF)
cf = FLAG_SUB_CF(RAX[0:32], 0x18426)
of = FLAG_SUB_OF(RAX[0:32], 0x18426)
af = ((RAX[0:32] ^ 0x18426) ^ (RAX[0:32] + -0x18426))[4:5]
RAX = zeroExt_64(RAX[0:32] + -0x18426)
[DEBUG] assignblk: RIP = CC_EQ(zf)?(loc_key_418,loc_key_419)
IRDst = CC_EQ(zf)?(loc_key_418,loc_key_419)
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[DEBUG] assignblk: RAX = zeroExt_64(RCX[0:32])
IRDst = loc_key_565
[DEBUG] assignblk: RAX = zeroExt_64(0xA1F9)
[DEBUG] assignblk: RCX = zeroExt_64(0x101A9)
[DEBUG] assignblk: zf = FLAG_EQ_CMP(@32[RSP + 0x28], 0xA)
nf = FLAG_SIGN_SUB(@32[RSP + 0x28], 0xA)
pf = parity((@32[RSP + 0x28] + -0xA) & 0xFF)
cf = FLAG_SUB_CF(@32[RSP + 0x28], 0xA)
of = FLAG_SUB_OF(@32[RSP + 0x28], 0xA)
af = ((@32[RSP + 0x28] ^ 0xA) ^ (@32[RSP + 0x28] + -0xA))[4:5]
[DEBUG] assignblk: RAX = zeroExt_64(RAX[0:32])
IRDst = CC_S>(nf, of, zf)?(loc_key_564,loc_key_565)
[DEBUG] assignblk: @32[RSP + 0x30] = RAX[0:32]
[DEBUG] assignblk: @32[RSP + 0x34] = 0x6724
[DEBUG] MOV 명령어 발견: @32[RSP + 0x34] = 0x6724
[DEBUG] 패치 대상 추가: 블록 loc_key_565, 값: 0x6724
[DEBUG] assignblk: RIP = loc_key_32
IRDst = loc_key_32
[INFO] 패치해야할 state 변수 수: 130
[ERROR] Invalid offset: loc_key_31
[ERROR] Invalid offset: loc_key_32
[ERROR] Invalid offset: loc_key_421
[ERROR] Invalid offset: loc_key_36
[ERROR] Invalid offset: loc_key_423
[ERROR] Invalid offset: loc_key_425
[ERROR] Invalid offset: loc_key_427
[ERROR] Invalid offset: loc_key_429
[ERROR] Invalid offset: loc_key_51
[ERROR] Invalid offset: loc_key_431
[ERROR] Invalid offset: loc_key_433
[ERROR] Invalid offset: loc_key_435
[ERROR] Invalid offset: loc_key_63
[ERROR] Invalid offset: loc_key_66
[ERROR] Invalid offset: loc_key_437
[ERROR] Invalid offset: loc_key_72
[ERROR] Invalid offset: loc_key_75
[ERROR] Invalid offset: loc_key_439
[ERROR] Invalid offset: loc_key_81
[ERROR] Invalid offset: loc_key_441
[ERROR] Invalid offset: loc_key_87
[ERROR] Invalid offset: loc_key_90
[ERROR] Invalid offset: loc_key_443
[ERROR] Invalid offset: loc_key_445
[ERROR] Invalid offset: loc_key_99
[ERROR] Invalid offset: loc_key_447
[ERROR] Invalid offset: loc_key_449
[ERROR] Invalid offset: loc_key_108
[ERROR] Invalid offset: loc_key_111
[ERROR] Invalid offset: loc_key_451
[ERROR] Invalid offset: loc_key_117
[ERROR] Invalid offset: loc_key_453
[ERROR] Invalid offset: loc_key_123
[ERROR] Invalid offset: loc_key_455
[ERROR] Invalid offset: loc_key_457
[ERROR] Invalid offset: loc_key_132
[ERROR] Invalid offset: loc_key_135
[ERROR] Invalid offset: loc_key_459
[ERROR] Invalid offset: loc_key_461
[ERROR] Invalid offset: loc_key_144
[ERROR] Invalid offset: loc_key_463
[ERROR] Invalid offset: loc_key_465
[ERROR] Invalid offset: loc_key_153
[ERROR] Invalid offset: loc_key_156
[ERROR] Invalid offset: loc_key_467
[ERROR] Invalid offset: loc_key_469
[ERROR] Invalid offset: loc_key_471
[ERROR] Invalid offset: loc_key_168
[ERROR] Invalid offset: loc_key_473
[ERROR] Invalid offset: loc_key_475
[ERROR] Invalid offset: loc_key_477
[ERROR] Invalid offset: loc_key_479
[ERROR] Invalid offset: loc_key_183
[ERROR] Invalid offset: loc_key_481
[ERROR] Invalid offset: loc_key_483
[ERROR] Invalid offset: loc_key_485
[ERROR] Invalid offset: loc_key_487
[ERROR] Invalid offset: loc_key_489
[ERROR] Invalid offset: loc_key_491
[ERROR] Invalid offset: loc_key_204
[ERROR] Invalid offset: loc_key_493
[ERROR] Invalid offset: loc_key_495
[ERROR] Invalid offset: loc_key_497
[ERROR] Invalid offset: loc_key_216
[ERROR] Invalid offset: loc_key_499
[ERROR] Invalid offset: loc_key_222
[ERROR] Invalid offset: loc_key_501
[ERROR] Invalid offset: loc_key_228
[ERROR] Invalid offset: loc_key_503
[ERROR] Invalid offset: loc_key_505
[ERROR] Invalid offset: loc_key_507
[ERROR] Invalid offset: loc_key_509
[ERROR] Invalid offset: loc_key_511
[ERROR] Invalid offset: loc_key_246
[ERROR] Invalid offset: loc_key_249
[ERROR] Invalid offset: loc_key_513
[ERROR] Invalid offset: loc_key_515
[ERROR] Invalid offset: loc_key_258
[ERROR] Invalid offset: loc_key_517
[ERROR] Invalid offset: loc_key_268
[ERROR] Invalid offset: loc_key_271
[ERROR] Invalid offset: loc_key_274
[ERROR] Invalid offset: loc_key_519
[ERROR] Invalid offset: loc_key_521
[ERROR] Invalid offset: loc_key_283
[ERROR] Invalid offset: loc_key_286
[ERROR] Invalid offset: loc_key_523
[ERROR] Invalid offset: loc_key_292
[ERROR] Invalid offset: loc_key_295
[ERROR] Invalid offset: loc_key_525
[ERROR] Invalid offset: loc_key_527
[ERROR] Invalid offset: loc_key_304
[ERROR] Invalid offset: loc_key_307
[ERROR] Invalid offset: loc_key_529
[ERROR] Invalid offset: loc_key_531
[ERROR] Invalid offset: loc_key_533
[ERROR] Invalid offset: loc_key_319
[ERROR] Invalid offset: loc_key_322
[ERROR] Invalid offset: loc_key_535
[ERROR] Invalid offset: loc_key_537
[ERROR] Invalid offset: loc_key_331
[ERROR] Invalid offset: loc_key_334
[ERROR] Invalid offset: loc_key_337
[ERROR] Invalid offset: loc_key_539
[ERROR] Invalid offset: loc_key_541
[ERROR] Invalid offset: loc_key_346
[ERROR] Invalid offset: loc_key_543
[ERROR] Invalid offset: loc_key_352
[ERROR] Invalid offset: loc_key_355
[ERROR] Invalid offset: loc_key_545
[ERROR] Invalid offset: loc_key_547
[ERROR] Invalid offset: loc_key_364
[ERROR] Invalid offset: loc_key_367
[ERROR] Invalid offset: loc_key_370
[ERROR] Invalid offset: loc_key_549
[ERROR] Invalid offset: loc_key_551
[ERROR] Invalid offset: loc_key_379
[ERROR] Invalid offset: loc_key_382
[ERROR] Invalid offset: loc_key_553
[ERROR] Invalid offset: loc_key_388
[ERROR] Invalid offset: loc_key_555
[ERROR] Invalid offset: loc_key_394
[ERROR] Invalid offset: loc_key_557
[ERROR] Invalid offset: loc_key_400
[ERROR] Invalid offset: loc_key_403
[ERROR] Invalid offset: loc_key_559
[ERROR] Invalid offset: loc_key_561
[ERROR] Invalid offset: loc_key_563
[ERROR] Invalid offset: loc_key_415
[ERROR] Invalid offset: loc_key_565
